/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

import * as t from '@babel/types';
import type { PluginPass } from '@babel/core';
import type { NodePath } from '@babel/traverse';
import type {
  CompiledNamespaces,
  StyleXOptions as RuntimeOptions,
} from '@stylexjs/shared';
export type ImportPathResolution =
  | false
  | ['themeNameRef' | 'filePath', string];
type ModuleResolution =
  | { type: 'commonJS'; rootDir: string; themeFileExtension?: string }
  | { type: 'haste'; themeFileExtension?: string }
  | {
      type: 'experimental_crossFileParsing';
      rootDir: string;
      themeFileExtension?: string;
    };
export type StyleXOptions = Readonly<
  Omit<
    RuntimeOptions,
    keyof ({
      importSources: ReadonlyArray<
        string | Readonly<{ from: string; as: string }>
      >;
      runtimeInjection:
        | boolean
        | (null | undefined | string)
        | Readonly<{ from: string; as: string }>;
      treeshakeCompensation?: boolean;
      genConditionalClasses: boolean;
      unstable_moduleResolution: void | ModuleResolution;
    })
  > & {
    importSources: ReadonlyArray<
      string | Readonly<{ from: string; as: string }>
    >;
    runtimeInjection:
      | boolean
      | (null | undefined | string)
      | Readonly<{ from: string; as: string }>;
    treeshakeCompensation?: boolean;
    genConditionalClasses: boolean;
    unstable_moduleResolution: void | ModuleResolution;
  }
>;
type StyleXStateOptions = Readonly<
  Omit<
    StyleXOptions,
    keyof ({
      runtimeInjection:
        | (null | undefined | string)
        | Readonly<{ from: string; as: string }>;
    })
  > & {
    runtimeInjection:
      | (null | undefined | string)
      | Readonly<{ from: string; as: string }>;
  }
>;
declare class StateManager {
  readonly _state: PluginPass;
  readonly importPaths: Set<string>;
  readonly stylexImport: Set<string>;
  readonly stylexPropsImport: Set<string>;
  readonly stylexCreateImport: Set<string>;
  readonly stylexIncludeImport: Set<string>;
  readonly stylexFirstThatWorksImport: Set<string>;
  readonly stylexKeyframesImport: Set<string>;
  readonly stylexDefineVarsImport: Set<string>;
  readonly stylexCreateThemeImport: Set<string>;
  readonly stylexTypesImport: Set<string>;
  injectImportInserted: null | undefined | t.Identifier;
  readonly styleMap: Map<string, CompiledNamespaces>;
  readonly styleVars: Map<string, NodePath>;
  readonly styleVarsToKeep: Set<[string, true | string, true | Array<string>]>;
  inStyleXCreate: boolean;
  constructor(state: PluginPass);
  get options(): StyleXStateOptions;
  get importPathString(): string;
  get importSources(): ReadonlyArray<string>;
  importAs(source: string): null | string;
  get canReferenceTheme(): boolean;
  get metadata(): { [key: string]: any };
  get runtimeInjection():
    | null
    | undefined
    | Readonly<{ from: string; as?: string }>;
  get isDev(): boolean;
  get isTest(): boolean;
  get filename(): string | void;
  get cssVars(): any;
  get treeshakeCompensation(): boolean;
  get fileNameForHashing(): null | string;
  importPathResolver(importPath: string): ImportPathResolution;
  addStyle(style: [string, { ltr: string; rtl?: string | null }, number]): void;
  markComposedNamespace(
    memberExpression: [string, true | string, true | Array<string>],
  ): void;
}
export default StateManager;
