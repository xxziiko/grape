/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 */

import type {
  Keyframes,
  Stylex$Create,
  StyleX$DefineVars,
  StyleX$CreateTheme,
  StyleXArray,
  CompiledStyles,
  InlineStyles,
  StyleXClassNameFor,
} from './StyleXTypes';
import type {
  ValueWithDefault,
  Angle,
  Color,
  Url,
  Image,
  Integer,
  LengthPercentage,
  Length,
  Percentage,
  Num,
  Resolution,
  Time,
  TransformFunction,
  TransformList,
} from './VarTypes';

export type {
  VarGroup,
  Theme,
  StyleXStyles,
  StyleXStylesWithout,
  StaticStyles,
  StaticStylesWithout,
} from './StyleXTypes';

declare export function props(
  this: ?mixed,
  ...styles: $ReadOnlyArray<
    StyleXArray<
      ?CompiledStyles | boolean | $ReadOnly<[CompiledStyles, InlineStyles]>,
    >,
  >
): $ReadOnly<{
  className?: string,
  style?: $ReadOnly<{ [string]: string | number }>,
}>;
declare export function attrs(
  ...styles: $ReadOnlyArray<
    StyleXArray<
      ?CompiledStyles | boolean | $ReadOnly<[CompiledStyles, InlineStyles]>,
    >,
  >
): $ReadOnly<{
  class?: string,
  style?: string,
}>;

type Stylex$Include = <
  TStyles: { +[string]: StyleXClassNameFor<string, mixed> },
>(
  styles: TStyles,
) => {
  +[Key in keyof TStyles]: TStyles[Key] extends StyleXClassNameFor<
    mixed,
    infer V,
  >
    ? V
    : string,
};

declare export const create: Stylex$Create;

declare export const defineVars: StyleX$DefineVars;

declare export const createTheme: StyleX$CreateTheme;

declare export const include: Stylex$Include;

declare export const types: {
  angle: <T: string | 0 = string | 0>(_v: ValueWithDefault<T>) => Angle<T>,
  color: <T: string = string>(_v: ValueWithDefault<T>) => Color<T>,
  url: <T: string = string>(_v: ValueWithDefault<T>) => Url<T>,
  image: <T: string = string>(_v: ValueWithDefault<T>) => Image<T>,
  integer: <T: number | string = number | string>(
    _v: ValueWithDefault<T>,
  ) => Integer<T>,
  lengthPercentage: <T: number | string = number | string>(
    _v: ValueWithDefault<T>,
  ) => LengthPercentage<T>,
  length: <T: number | string = number | string>(
    _v: ValueWithDefault<T>,
  ) => Length<T>,
  percentage: <T: number | string = number | string>(
    _v: ValueWithDefault<T>,
  ) => Percentage<T>,
  number: <T: number | string = number | string>(
    _v: ValueWithDefault<T>,
  ) => Num<T>,
  resolution: <T: string = string>(_v: ValueWithDefault<T>) => Resolution<T>,
  time: <T: string | 0 = string | 0>(_v: ValueWithDefault<T>) => Time<T>,
  transformFunction: <T: string = string>(
    _v: ValueWithDefault<T>,
  ) => TransformFunction<T>,
  transformList: <T: string = string>(
    _v: ValueWithDefault<T>,
  ) => TransformList<T>,
};

declare export const keyframes: (keyframes: Keyframes) => string;

declare export const firstThatWorks: <T: string | number>(
  ...styles: $ReadOnlyArray<T>
) => $ReadOnlyArray<T>;

type IStyleX = {
  (...styles: $ReadOnlyArray<StyleXArray<?CompiledStyles | boolean>>): string,
  props: (
    this: ?mixed,
    ...styles: $ReadOnlyArray<
      StyleXArray<
        ?CompiledStyles | boolean | $ReadOnly<[CompiledStyles, InlineStyles]>,
      >,
    >
  ) => $ReadOnly<{
    className?: string,
    style?: $ReadOnly<{ [string]: string | number }>,
  }>,
  attrs: (
    ...styles: $ReadOnlyArray<
      StyleXArray<
        ?CompiledStyles | boolean | $ReadOnly<[CompiledStyles, InlineStyles]>,
      >,
    >
  ) => $ReadOnly<{
    class?: string,
    style?: string,
  }>,
  create: Stylex$Create,
  defineVars: StyleX$DefineVars,
  createTheme: StyleX$CreateTheme,
  include: Stylex$Include,
  types: typeof types,
  firstThatWorks: <T: string | number>(
    ...v: $ReadOnlyArray<T>
  ) => $ReadOnlyArray<T>,
  keyframes: (keyframes: Keyframes) => string,
  __customProperties?: { [string]: mixed },
  ...
};


declare export const legacyMerge: IStyleX;
declare export default IStyleX;
