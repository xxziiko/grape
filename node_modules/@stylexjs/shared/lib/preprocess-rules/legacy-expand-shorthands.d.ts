/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

import type { TStyleValue } from '../common-types';
/**
 * Shorthand properties:
 * - [x] all - Should be banned
 * - [ ] animation
 * - [ ] background
 * - [-] border
 * - [x] border-block-end
 * - [x] border-block-start
 * - [ ] border-bottom
 * - [x] border-color
 * - [x] border-image
 * - [x] border-inline-end
 * - [x] border-inline-start
 * - [ ] border-left
 * - [x] border-radius
 * - [ ] border-right
 * - [x] border-style
 * - [ ] border-top
 * - [x] border-width
 * - [ ] column-rule
 * - [ ] columns
 * - [ ] flex
 * - [ ] flex-flow
 * - [ ] font
 * - [ ] gap
 * - [ ] grid
 * - [ ] grid-area
 * - [ ] grid-column
 * - [ ] grid-row
 * - [ ] grid-template
 * - [ ] list-style
 * - [x] margin
 * - [ ] mask
 * - [ ] offset
 * - [ ] outline
 * - [x] overflow
 * - [x] padding
 * - [ ] place-content
 * - [ ] place-items
 * - [ ] place-self
 * - [ ] scroll-margin
 * - [ ] scroll-padding
 * - [ ] text-decoration
 * - [ ] text-emphasis
 * - [ ] transition
 */

/**
 * Shorthand properties:
 * - [x] all - Should be banned
 * - [ ] animation
 * - [ ] background
 * - [-] border
 * - [x] border-block-end
 * - [x] border-block-start
 * - [ ] border-bottom
 * - [x] border-color
 * - [x] border-image
 * - [x] border-inline-end
 * - [x] border-inline-start
 * - [ ] border-left
 * - [x] border-radius
 * - [ ] border-right
 * - [x] border-style
 * - [ ] border-top
 * - [x] border-width
 * - [ ] column-rule
 * - [ ] columns
 * - [ ] flex
 * - [ ] flex-flow
 * - [ ] font
 * - [ ] gap
 * - [ ] grid
 * - [ ] grid-area
 * - [ ] grid-column
 * - [ ] grid-row
 * - [ ] grid-template
 * - [ ] list-style
 * - [x] margin
 * - [ ] mask
 * - [ ] offset
 * - [ ] outline
 * - [x] overflow
 * - [x] padding
 * - [ ] place-content
 * - [ ] place-items
 * - [ ] place-self
 * - [ ] scroll-margin
 * - [ ] scroll-padding
 * - [ ] text-decoration
 * - [ ] text-emphasis
 * - [ ] transition
 */

type TReturn = ReadonlyArray<[string, TStyleValue]>;
declare const shorthands: {
  border: (rawValue: TStyleValue) => TReturn;
  borderColor: (rawValue: TStyleValue) => TReturn;
  borderHorizontal: (rawValue: TStyleValue) => TReturn;
  borderStyle: (rawValue: TStyleValue) => TReturn;
  borderVertical: (rawValue: TStyleValue) => TReturn;
  borderWidth: (rawValue: TStyleValue) => TReturn;
  borderHorizontalColor: (rawValue: TStyleValue) => TReturn;
  borderHorizontalStyle: (rawValue: TStyleValue) => TReturn;
  borderHorizontalWidth: (rawValue: TStyleValue) => TReturn;
  borderVerticalColor: (rawValue: TStyleValue) => TReturn;
  borderVerticalStyle: (rawValue: TStyleValue) => TReturn;
  borderVerticalWidth: (rawValue: TStyleValue) => TReturn;
  borderRadius: (rawValue: TStyleValue) => TReturn;
  inset: (rawValue: TStyleValue) => TReturn;
  insetInline: (rawValue: TStyleValue) => TReturn;
  insetBlock: (rawValue: TStyleValue) => TReturn;
  start: (rawValue: TStyleValue) => TReturn;
  end: (rawValue: TStyleValue) => TReturn;
  left: (rawValue: TStyleValue) => TReturn;
  right: (rawValue: TStyleValue) => TReturn;
  gap: (rawValue: TStyleValue) => TReturn;
  margin: (rawValue: TStyleValue) => TReturn;
  marginHorizontal: (rawValue: TStyleValue) => TReturn;
  marginStart: (rawValue: TStyleValue) => TReturn;
  marginEnd: (rawValue: TStyleValue) => TReturn;
  marginLeft: (rawValue: TStyleValue) => TReturn;
  marginRight: (rawValue: TStyleValue) => TReturn;
  marginVertical: (rawValue: TStyleValue) => TReturn;
  overflow: (rawValue: TStyleValue) => TReturn;
  padding: (rawValue: TStyleValue) => TReturn;
  paddingHorizontal: (val: TStyleValue) => TReturn;
  paddingStart: (val: TStyleValue) => TReturn;
  paddingEnd: (val: TStyleValue) => TReturn;
  paddingLeft: (val: TStyleValue) => TReturn;
  paddingRight: (val: TStyleValue) => TReturn;
  paddingVertical: (val: TStyleValue) => TReturn;
};
declare const aliases: {
  insetBlockStart: (val: TStyleValue) => TReturn;
  insetBlockEnd: (val: TStyleValue) => TReturn;
  insetInlineStart: any;
  insetInlineEnd: any;
  blockSize: (val: TStyleValue) => TReturn;
  inlineSize: (val: TStyleValue) => TReturn;
  minBlockSize: (val: TStyleValue) => TReturn;
  minInlineSize: (val: TStyleValue) => TReturn;
  maxBlockSize: (val: TStyleValue) => TReturn;
  maxInlineSize: (val: TStyleValue) => TReturn;
  borderBlockWidth: any;
  borderBlockStyle: any;
  borderBlockColor: any;
  borderBlockStartWidth: (val: TStyleValue) => TReturn;
  borderBlockStartStyle: (val: TStyleValue) => TReturn;
  borderBlockStartColor: (val: TStyleValue) => TReturn;
  borderBlockEndWidth: (val: TStyleValue) => TReturn;
  borderBlockEndStyle: (val: TStyleValue) => TReturn;
  borderBlockEndColor: (val: TStyleValue) => TReturn;
  borderInlineWidth: any;
  borderInlineStyle: any;
  borderInlineColor: any;
  borderInlineStartWidth: (val: TStyleValue) => TReturn;
  borderInlineStartStyle: (val: TStyleValue) => TReturn;
  borderInlineStartColor: (val: TStyleValue) => TReturn;
  borderInlineEndWidth: (val: TStyleValue) => TReturn;
  borderInlineEndStyle: (val: TStyleValue) => TReturn;
  borderInlineEndColor: (val: TStyleValue) => TReturn;
  borderStartStartRadius: (val: TStyleValue) => TReturn;
  borderStartEndRadius: (val: TStyleValue) => TReturn;
  borderEndStartRadius: (val: TStyleValue) => TReturn;
  borderEndEndRadius: (val: TStyleValue) => TReturn;
  gridGap: any;
  gridRowGap: (value: TStyleValue) => TReturn;
  gridColumnGap: (value: TStyleValue) => TReturn;
  marginBlock: any;
  marginBlockStart: (val: TStyleValue) => TReturn;
  marginBlockEnd: (val: TStyleValue) => TReturn;
  marginInline: any;
  marginInlineStart: (val: TStyleValue) => TReturn;
  marginInlineEnd: (val: TStyleValue) => TReturn;
  overflowBlock: (value: TStyleValue) => TReturn;
  overflowInline: (value: TStyleValue) => TReturn;
  paddingBlock: any;
  paddingBlockStart: (val: TStyleValue) => TReturn;
  paddingBlockEnd: (val: TStyleValue) => TReturn;
  paddingInline: any;
  paddingInlineStart: (val: TStyleValue) => TReturn;
  paddingInlineEnd: (val: TStyleValue) => TReturn;
  scrollMarginBlockStart: (value: TStyleValue) => TReturn;
  scrollMarginBlockEnd: (value: TStyleValue) => TReturn;
};
declare const expansions: Omit<shorthands, keyof (aliases | {})> &
  Omit<aliases, keyof ({})> & {};
declare const $$EXPORT_DEFAULT_DECLARATION$$: typeof expansions;
export default $$EXPORT_DEFAULT_DECLARATION$$;
