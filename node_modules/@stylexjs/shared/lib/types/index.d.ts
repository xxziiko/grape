/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

type ValueWithDefault<T> =
  | T
  | Readonly<{ default: T; [$$Key$$: string]: ValueWithDefault<T> }>;
type CSSSyntax =
  | '*'
  | '<length>'
  | '<number>'
  | '<percentage>'
  | '<length-percentage>'
  | '<color>'
  | '<image>'
  | '<url>'
  | '<integer>'
  | '<angle>'
  | '<time>'
  | '<resolution>'
  | '<transform-function>'
  | '<custom-ident>'
  | '<transform-list>';
type CSSSyntaxType = CSSSyntax | ReadonlyArray<CSSSyntax>;
export declare class CSSType {}
export interface ICSSType<T extends string | number> {
  readonly value: ValueWithDefault<T>;
  readonly syntax: CSSSyntaxType;
}
type AnguleValue = string;
export declare class Angle<T extends AnguleValue>
  extends CSSType
  implements ICSSType<T>
{
  readonly value: ValueWithDefault<T>;
  readonly syntax: CSSSyntaxType;
  static readonly syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>);
  static create<T extends AnguleValue = AnguleValue>(
    value: ValueWithDefault<T>,
  ): Angle<T>;
}
export declare const angle: any;
type ColorValue = string;
export declare class Color<T extends ColorValue>
  extends CSSType
  implements ICSSType<T>
{
  readonly value: ValueWithDefault<T>;
  readonly syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>);
  static create<T extends ColorValue = ColorValue>(
    value: ValueWithDefault<T>,
  ): Color<T>;
}
export declare const color: any;
type URLValue = string;
export declare class Url<T extends URLValue>
  extends CSSType
  implements ICSSType<T>
{
  readonly value: ValueWithDefault<T>;
  readonly syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>);
  static create<T extends URLValue = URLValue>(
    value: ValueWithDefault<T>,
  ): Url<T>;
}
export declare const url: any;
type ImageValue = string;
export declare class Image<T extends ImageValue>
  extends Url<T>
  implements ICSSType<T>
{
  readonly value: ValueWithDefault<T>;
  readonly syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>);
  static create<T extends ImageValue = ImageValue>(
    value: ValueWithDefault<T>,
  ): Image<T>;
}
export declare const image: any;
type IntegerValue = number;
export declare class Integer<T extends IntegerValue>
  extends CSSType
  implements ICSSType<T>
{
  readonly value: ValueWithDefault<T>;
  readonly syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>);
  static create<T extends IntegerValue = IntegerValue>(value: T): Integer<T>;
}
export declare const integer: any;
type LengthPercentageValue = string;
export declare class LengthPercentage<T extends LengthPercentageValue>
  extends CSSType
  implements ICSSType<string>
{
  readonly value: ValueWithDefault<T>;
  readonly syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>);
  static createLength<T extends LengthPercentageValue | number>(
    value: ValueWithDefault<T>,
  ): LengthPercentage<string>;
  static createPercentage<T extends LengthPercentageValue | number>(
    value: ValueWithDefault<T>,
  ): LengthPercentage<string>;
}
export declare const lengthPercentage: any;
type LengthValue = number | string;
export declare class Length<T extends LengthValue>
  extends LengthPercentage<string>
  implements ICSSType<string>
{
  readonly value: ValueWithDefault<string>;
  readonly syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>);
  static create<T extends LengthValue = LengthValue>(
    value: ValueWithDefault<T>,
  ): Length<T>;
}
export declare const length: any;
type PercentageValue = string | number;
export declare class Percentage<T extends PercentageValue>
  extends LengthPercentage<string>
  implements ICSSType<string>
{
  readonly value: ValueWithDefault<string>;
  readonly syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>);
  static create<T extends PercentageValue = PercentageValue>(
    value: ValueWithDefault<T>,
  ): Percentage<T>;
}
export declare const percentage: any;
type NumberValue = number;
export declare class Num<T extends NumberValue>
  extends CSSType
  implements ICSSType<T>
{
  readonly value: ValueWithDefault<T>;
  readonly syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>);
  static create<T extends NumberValue = NumberValue>(
    value: ValueWithDefault<T>,
  ): Num<T>;
}
export declare const number: any;
type ResolutionValue = string | 0;
export declare class Resolution<T extends ResolutionValue>
  extends CSSType
  implements ICSSType<T>
{
  readonly value: ValueWithDefault<T>;
  readonly syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>);
  static create<T extends ResolutionValue = ResolutionValue>(
    value: ValueWithDefault<T>,
  ): Resolution<T>;
}
export declare const resolution: any;
type TimeValue = string | 0;
export declare class Time<T extends TimeValue>
  extends CSSType
  implements ICSSType<T>
{
  readonly value: ValueWithDefault<T>;
  readonly syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>);
  static create<T extends TimeValue = TimeValue>(
    value: ValueWithDefault<T>,
  ): Time<T>;
}
export declare const time: any;
type TransformFunctionValue = string;
export declare class TransformFunction<T extends TransformFunctionValue>
  extends CSSType
  implements ICSSType<T>
{
  readonly value: ValueWithDefault<T>;
  readonly syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>);
  static create<T extends TransformFunctionValue = TransformFunctionValue>(
    value: ValueWithDefault<T>,
  ): TransformFunction<T>;
}
export declare const transformFunction: any;
type TransformListValue = string;
export declare class TransformList<T extends TransformListValue>
  extends CSSType
  implements ICSSType<T>
{
  readonly value: ValueWithDefault<T>;
  readonly syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>);
  static create<T extends TransformListValue = TransformListValue>(
    value: ValueWithDefault<T>,
  ): TransformList<T>;
}
export declare const transformList: any;
