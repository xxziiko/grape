/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 */

// import type { Color as ColorType } from './stylex-types-color';

// We want all in one file?
// option 1, create interface an implement it in the class
// why? All the types have a single base definition of props
// We want on type that defines CSS Types
// Option 2: Do a union type and make

// interface ICSSType {
//   toString(): string;
// }

type ValueWithDefault<+T> =
  | T
  | $ReadOnly<{
      default: T,
      [string]: ValueWithDefault<T>,
    }>;

type CSSSyntax =
  | '*'
  | '<length>'
  | '<number>'
  | '<percentage>'
  | '<length-percentage>'
  | '<color>'
  | '<image>'
  | '<url>'
  | '<integer>'
  | '<angle>'
  | '<time>'
  | '<resolution>'
  | '<transform-function>'
  | '<custom-ident>'
  | '<transform-list>';

type CSSSyntaxType = CSSSyntax | $ReadOnlyArray<CSSSyntax>;

declare export class CSSType {}

export interface ICSSType<+T: string | number> {
  +value: ValueWithDefault<T>;
  +syntax: CSSSyntaxType;
}

type AnguleValue = string;
declare export class Angle<+T: AnguleValue>
  extends CSSType
  implements ICSSType<T>
{
  +value: ValueWithDefault<T>;
  +syntax: CSSSyntaxType;
  static +syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>): void;
  static create<T: AnguleValue = AnguleValue>(
    value: ValueWithDefault<T>,
  ): Angle<T>;
}
declare export const angle: $FlowFixMe;

type ColorValue = string;
declare export class Color<+T: ColorValue>
  extends CSSType
  implements ICSSType<T>
{
  +value: ValueWithDefault<T>;
  +syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>): void;
  static create<T: ColorValue = ColorValue>(
    value: ValueWithDefault<T>,
  ): Color<T>;
}
declare export const color: $FlowFixMe;

type URLValue = string;

declare export class Url<+T: URLValue> extends CSSType implements ICSSType<T> {
  +value: ValueWithDefault<T>;
  +syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>): void;
  static create<T: URLValue = URLValue>(value: ValueWithDefault<T>): Url<T>;
}
declare export const url: $FlowFixMe;

type ImageValue = string;

declare export class Image<+T: ImageValue>
  extends Url<T>
  implements ICSSType<T>
{
  +value: ValueWithDefault<T>;
  +syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>): void;
  static create<T: ImageValue = ImageValue>(
    value: ValueWithDefault<T>,
  ): Image<T>;
}
declare export const image: $FlowFixMe;

type IntegerValue = number;

declare export class Integer<+T: IntegerValue>
  extends CSSType
  implements ICSSType<T>
{
  +value: ValueWithDefault<T>;
  +syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>): void;
  static create<T: IntegerValue = IntegerValue>(value: T): Integer<T>;
}
declare export const integer: $FlowFixMe;

type LengthPercentageValue = string;

declare export class LengthPercentage<+T: LengthPercentageValue>
  extends CSSType
  implements ICSSType<string>
{
  +value: ValueWithDefault<T>;
  +syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>): void;
  static createLength<T: LengthPercentageValue | number>(
    value: ValueWithDefault<T>,
  ): LengthPercentage<string>;
  static createPercentage<T: LengthPercentageValue | number>(
    value: ValueWithDefault<T>,
  ): LengthPercentage<string>;
}
declare export const lengthPercentage: $FlowFixMe;

type LengthValue = number | string;

declare export class Length<+T: LengthValue>
  extends LengthPercentage<string>
  implements ICSSType<string>
{
  +value: ValueWithDefault<string>;
  +syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>): void;
  static create<T: LengthValue = LengthValue>(
    value: ValueWithDefault<T>,
  ): Length<T>;
}
declare export const length: $FlowFixMe;

type PercentageValue = string | number;

declare export class Percentage<+T: PercentageValue>
  extends LengthPercentage<string>
  implements ICSSType<string>
{
  +value: ValueWithDefault<string>;
  +syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>): void;
  static create<T: PercentageValue = PercentageValue>(
    value: ValueWithDefault<T>,
  ): Percentage<T>;
}
declare export const percentage: $FlowFixMe;

type NumberValue = number;

declare export class Num<+T: NumberValue>
  extends CSSType
  implements ICSSType<T>
{
  +value: ValueWithDefault<T>;
  +syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>): void;
  static create<T: NumberValue = NumberValue>(
    value: ValueWithDefault<T>,
  ): Num<T>;
}
declare export const number: $FlowFixMe;

type ResolutionValue = string | 0;

declare export class Resolution<+T: ResolutionValue>
  extends CSSType
  implements ICSSType<T>
{
  +value: ValueWithDefault<T>;
  +syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>): void;
  static create<T: ResolutionValue = ResolutionValue>(
    value: ValueWithDefault<T>,
  ): Resolution<T>;
}
declare export const resolution: $FlowFixMe;

type TimeValue = string | 0;

declare export class Time<+T: TimeValue>
  extends CSSType
  implements ICSSType<T>
{
  +value: ValueWithDefault<T>;
  +syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>): void;
  static create<T: TimeValue = TimeValue>(value: ValueWithDefault<T>): Time<T>;
}
declare export const time: $FlowFixMe;

type TransformFunctionValue = string;

declare export class TransformFunction<+T: TransformFunctionValue>
  extends CSSType
  implements ICSSType<T>
{
  +value: ValueWithDefault<T>;
  +syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>): void;
  static create<T: TransformFunctionValue = TransformFunctionValue>(
    value: ValueWithDefault<T>,
  ): TransformFunction<T>;
}
declare export const transformFunction: $FlowFixMe;

type TransformListValue = string;

declare export class TransformList<T: TransformListValue>
  extends CSSType
  implements ICSSType<T>
{
  +value: ValueWithDefault<T>;
  +syntax: CSSSyntaxType;
  constructor(value: ValueWithDefault<T>): void;
  static create<T: TransformListValue = TransformListValue>(
    value: ValueWithDefault<T>,
  ): TransformList<T>;
}
declare export const transformList: $FlowFixMe;
