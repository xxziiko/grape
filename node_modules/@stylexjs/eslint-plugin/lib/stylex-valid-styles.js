'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _namedColors = _interopRequireDefault(require("./reference/namedColors"));
var _getDistance = _interopRequireDefault(require("./utils/getDistance"));
var _isWhiteSpaceOrEmpty = _interopRequireDefault(require("./utils/isWhiteSpaceOrEmpty"));
var _micromatch = _interopRequireDefault(require("micromatch"));
var _isCSSVariable = _interopRequireDefault(require("./rules/isCSSVariable"));
var _makeLiteralRule = _interopRequireDefault(require("./rules/makeLiteralRule"));
var _makeRangeRule = _interopRequireDefault(require("./rules/makeRangeRule"));
var _makeRegExRule = _interopRequireDefault(require("./rules/makeRegExRule"));
var _isString = _interopRequireDefault(require("./rules/isString"));
var _isHexColor = _interopRequireDefault(require("./rules/isHexColor"));
var _makeUnionRule = _interopRequireDefault(require("./rules/makeUnionRule"));
var _isNumber = _interopRequireDefault(require("./rules/isNumber"));
var _isPercentage = _interopRequireDefault(require("./rules/isPercentage"));
var _isAnimationName = _interopRequireDefault(require("./rules/isAnimationName"));
var _isStylexDefineVarsToken = _interopRequireDefault(require("./rules/isStylexDefineVarsToken"));
var _splitCssValue = require("./utils/split-css-value");
var _evaluate = _interopRequireDefault(require("./utils/evaluate"));
var _resolveKey = _interopRequireDefault(require("./utils/resolveKey"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const showError = message => () => ({
  message
});
const isStringOrNumber = (0, _makeUnionRule.default)(_isString.default, _isNumber.default);
const isNamedColor = (0, _makeUnionRule.default)(...Array.from(_namedColors.default).map(color => (0, _makeLiteralRule.default)(color)));
const absoluteLengthUnits = new Set(['px', 'mm', 'in', 'pc', 'pt']);
const isAbsoluteLength = (node, _variables) => {
  if (node.type === 'Literal') {
    const val = node.value;
    if (typeof val === 'string' && Array.from(absoluteLengthUnits).some(unit => val.match(new RegExp(`^([-,+]?\\d+(\\.\\d+)?${unit})$`)))) {
      return undefined;
    }
  }
  return {
    message: `a number ending in ${Array.from(absoluteLengthUnits).join(', ')}`
  };
};
const relativeLengthUnits = new Set(['ch', 'em', 'ex', 'ic', 'rem', 'vh', 'vw', 'vmin', 'vmax', 'svh', 'dvh', 'lvh', 'svw', 'dvw', 'ldw', 'cqw', 'cqh', 'cqmin', 'cqmax']);
const isRelativeLength = (node, _variables) => {
  if (node.type === 'Literal') {
    const val = node.value;
    if (typeof val === 'string' && Array.from(relativeLengthUnits).some(unit => val.match(new RegExp(`^([-,+]?\\d+(\\.\\d+)?${unit})$`)))) {
      return undefined;
    }
  }
  return {
    message: `a number ending in ${Array.from(relativeLengthUnits).join(', ')}`
  };
};
const isLength = (0, _makeUnionRule.default)(isAbsoluteLength, isRelativeLength);
const all = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)(null), (0, _makeLiteralRule.default)('initial'), (0, _makeLiteralRule.default)('inherit'), (0, _makeLiteralRule.default)('unset'), (0, _makeLiteralRule.default)('revert'));
const color = (0, _makeUnionRule.default)(_isString.default, isNamedColor, _isHexColor.default);
const width = (0, _makeUnionRule.default)(_isString.default, _isNumber.default, (0, _makeLiteralRule.default)('available'), (0, _makeLiteralRule.default)('min-content'), (0, _makeLiteralRule.default)('max-content'), (0, _makeLiteralRule.default)('fit-content'), (0, _makeLiteralRule.default)('auto'), isLength, _isPercentage.default);
const borderWidth = (0, _makeUnionRule.default)(_isNumber.default, (0, _makeLiteralRule.default)('thin'), (0, _makeLiteralRule.default)('medium'), (0, _makeLiteralRule.default)('thick'), _isString.default, isLength);
const lengthPercentage = isStringOrNumber;
const borderImageSource = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const time = _isString.default;
const singleAnimationDirection = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('reverse'), (0, _makeLiteralRule.default)('alternate'), (0, _makeLiteralRule.default)('alternate-reverse'));
const singleAnimationFillMode = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('forwards'), (0, _makeLiteralRule.default)('backwards'), (0, _makeLiteralRule.default)('both'));
const singleAnimationIterationCount = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('infinite'), _isNumber.default);
const singleAnimationPlayState = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('running'), (0, _makeLiteralRule.default)('paused'));
const singleTransitionTimingFunction = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('ease'), (0, _makeLiteralRule.default)('linear'), (0, _makeLiteralRule.default)('ease-in'), (0, _makeLiteralRule.default)('ease-out'), (0, _makeLiteralRule.default)('ease-in-out'), (0, _makeLiteralRule.default)('step-start'), (0, _makeLiteralRule.default)('step-end'), _isString.default);
const attachment = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('scroll'), (0, _makeLiteralRule.default)('fixed'), (0, _makeLiteralRule.default)('local'));
const blendMode = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('multiply'), (0, _makeLiteralRule.default)('screen'), (0, _makeLiteralRule.default)('overlay'), (0, _makeLiteralRule.default)('darken'), (0, _makeLiteralRule.default)('lighten'), (0, _makeLiteralRule.default)('color-dodge'), (0, _makeLiteralRule.default)('color-burn'), (0, _makeLiteralRule.default)('hard-light'), (0, _makeLiteralRule.default)('soft-light'), (0, _makeLiteralRule.default)('difference'), (0, _makeLiteralRule.default)('exclusion'), (0, _makeLiteralRule.default)('hue'), (0, _makeLiteralRule.default)('saturation'), (0, _makeLiteralRule.default)('color'), (0, _makeLiteralRule.default)('luminosity'));
const bgSize = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('cover'), (0, _makeLiteralRule.default)('contain'));
const boxAlign = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('start'), (0, _makeLiteralRule.default)('center'), (0, _makeLiteralRule.default)('end'), (0, _makeLiteralRule.default)('baseline'), (0, _makeLiteralRule.default)('stretch'));
const repeatStyle = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('repeat-x'), (0, _makeLiteralRule.default)('repeat-y'), _isString.default);
const backgroundPosition = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('top'), (0, _makeLiteralRule.default)('bottom'), (0, _makeLiteralRule.default)('left'), (0, _makeLiteralRule.default)('right'), (0, _makeLiteralRule.default)('center'));
const backgroundPositionX = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('left'), (0, _makeLiteralRule.default)('right'), (0, _makeLiteralRule.default)('center'));
const backgroundPositionY = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('top'), (0, _makeLiteralRule.default)('bottom'), (0, _makeLiteralRule.default)('center'));
const borderImageOutset = _isString.default;
const borderImageRepeat = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('stretch'), (0, _makeLiteralRule.default)('repeat'), (0, _makeLiteralRule.default)('round'), (0, _makeLiteralRule.default)('space'));
const borderImageWidth = _isString.default;
const borderImageSlice = (0, _makeUnionRule.default)(isStringOrNumber, (0, _makeLiteralRule.default)('fill'));
const box = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('border-box'), (0, _makeLiteralRule.default)('padding-box'), (0, _makeLiteralRule.default)('content-box'));
const brStyle = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('hidden'), (0, _makeLiteralRule.default)('dotted'), (0, _makeLiteralRule.default)('dashed'), (0, _makeLiteralRule.default)('solid'), (0, _makeLiteralRule.default)('double'), (0, _makeLiteralRule.default)('groove'), (0, _makeLiteralRule.default)('ridge'), (0, _makeLiteralRule.default)('inset'), (0, _makeLiteralRule.default)('outset'));
const CSSCursor = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('default'), (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('context-menu'), (0, _makeLiteralRule.default)('help'), (0, _makeLiteralRule.default)('pointer'), (0, _makeLiteralRule.default)('progress'), (0, _makeLiteralRule.default)('wait'), (0, _makeLiteralRule.default)('cell'), (0, _makeLiteralRule.default)('crosshair'), (0, _makeLiteralRule.default)('text'), (0, _makeLiteralRule.default)('vertical-text'), (0, _makeLiteralRule.default)('alias'), (0, _makeLiteralRule.default)('copy'), (0, _makeLiteralRule.default)('move'), (0, _makeLiteralRule.default)('no-drop'), (0, _makeLiteralRule.default)('not-allowed'), (0, _makeLiteralRule.default)('e-resize'), (0, _makeLiteralRule.default)('n-resize'), (0, _makeLiteralRule.default)('ne-resize'), (0, _makeLiteralRule.default)('nw-resize'), (0, _makeLiteralRule.default)('s-resize'), (0, _makeLiteralRule.default)('se-resize'), (0, _makeLiteralRule.default)('sw-resize'), (0, _makeLiteralRule.default)('w-resize'), (0, _makeLiteralRule.default)('ew-resize'), (0, _makeLiteralRule.default)('ns-resize'), (0, _makeLiteralRule.default)('nesw-resize'), (0, _makeLiteralRule.default)('nwse-resize'), (0, _makeLiteralRule.default)('col-resize'), (0, _makeLiteralRule.default)('row-resize'), (0, _makeLiteralRule.default)('all-scroll'), (0, _makeLiteralRule.default)('zoom-in'), (0, _makeLiteralRule.default)('zoom-out'), (0, _makeLiteralRule.default)('grab'), (0, _makeLiteralRule.default)('grabbing'), (0, _makeLiteralRule.default)('-webkit-grab'), (0, _makeLiteralRule.default)('-webkit-grabbing'));
const relativeSize = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('larger'), (0, _makeLiteralRule.default)('smaller'));
const emptyCells = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('show'), (0, _makeLiteralRule.default)('hide'));
const filter = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const flexBasis = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('content'), _isNumber.default, _isString.default);
const flexDirection = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('row'), (0, _makeLiteralRule.default)('row-reverse'), (0, _makeLiteralRule.default)('column'), (0, _makeLiteralRule.default)('column-reverse'));
const flexWrap = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('nowrap'), (0, _makeLiteralRule.default)('wrap'), (0, _makeLiteralRule.default)('wrap-reverse'));
const flexGrow = isStringOrNumber;
const flexShrink = isStringOrNumber;
const flexFlow = (0, _makeUnionRule.default)(flexDirection, flexWrap);
const float = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('left'), (0, _makeLiteralRule.default)('right'), (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('start'), (0, _makeLiteralRule.default)('end'), (0, _makeLiteralRule.default)('inline-start'), (0, _makeLiteralRule.default)('inline-end'));
const absoluteSize = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('xx-small'), (0, _makeLiteralRule.default)('x-small'), (0, _makeLiteralRule.default)('small'), (0, _makeLiteralRule.default)('medium'), (0, _makeLiteralRule.default)('large'), (0, _makeLiteralRule.default)('x-large'), (0, _makeLiteralRule.default)('xx-large'));
const fontFamily = _isString.default;
const gridLine = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), _isString.default);
const gridTemplate = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('subgrid'), _isString.default);
const gridTemplateAreas = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const gridTemplateColumns = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('subgrid'), _isString.default);
const gridTemplateRows = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('subgrid'), _isString.default);
const gridRowGap = lengthPercentage;
const trackBreadth = (0, _makeUnionRule.default)(lengthPercentage, _isString.default, (0, _makeLiteralRule.default)('min-content'), (0, _makeLiteralRule.default)('max-content'), (0, _makeLiteralRule.default)('auto'));
const listStyleType = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('none'));
const trackSize = (0, _makeUnionRule.default)(trackBreadth, _isString.default);
const borderStyle = brStyle;
const columnRuleColor = color;
const columnRuleStyle = brStyle;
const columnRuleWidth = borderWidth;
const columnRule = (0, _makeUnionRule.default)(columnRuleWidth, columnRuleStyle, columnRuleColor);
const singleTimingFunction = singleTransitionTimingFunction;
const shapeBox = (0, _makeUnionRule.default)(box, (0, _makeLiteralRule.default)('margin-box'));
const geometryBox = (0, _makeUnionRule.default)(shapeBox, (0, _makeLiteralRule.default)('fill-box'), (0, _makeLiteralRule.default)('stroke-box'), (0, _makeLiteralRule.default)('view-box'));
const maskReference = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const compositeOperator = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('add'), (0, _makeLiteralRule.default)('subtract'), (0, _makeLiteralRule.default)('intersect'), (0, _makeLiteralRule.default)('exclude'));
const maskingMode = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('alpha'), (0, _makeLiteralRule.default)('luminance'), (0, _makeLiteralRule.default)('match-source'));
const maskLayer = (0, _makeUnionRule.default)(maskReference, maskingMode, _isString.default, repeatStyle, geometryBox, compositeOperator);
const alignContent = (0, _makeUnionRule.default)('center', 'start', 'end', 'flex-start', 'flex-end', 'normal', 'baseline', 'first baseline', 'last baseline', 'space-between', 'space-around', 'space-evenly', 'stretch', 'safe center', 'unsafe center');
const alignItems = (0, _makeUnionRule.default)('normal', 'stretch', 'center', 'start', 'end', 'flex-start', 'flex-end', 'self-start', 'self-end', 'baseline', 'first baseline', 'last baseline', 'safe center', 'unsafe center');
const alignSelf = (0, _makeUnionRule.default)('auto', 'normal', 'center', 'start', 'end', 'self-start', 'self-end', 'flex-start', 'flex-end', 'baseline', 'first baseline', 'last baseline', 'stretch', 'safe center', 'unsafe center');
const animationDelay = time;
const animationDirection = singleAnimationDirection;
const animationDuration = time;
const animationFillMode = singleAnimationFillMode;
const animationIterationCount = singleAnimationIterationCount;
const animationPlayState = singleAnimationPlayState;
const animationTimingFunction = singleTimingFunction;
const appearance = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('textfield'));
const backdropFilter = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const backfaceVisibility = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('visible'), (0, _makeLiteralRule.default)('hidden'));
const backgroundAttachment = attachment;
const backgroundBlendMode = blendMode;
const backgroundClip = (0, _makeUnionRule.default)('border-box', 'padding-box', 'content-box', 'text');
const backgroundColor = color;
const backgroundImage = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const backgroundOrigin = box;
const backgroundRepeat = repeatStyle;
const backgroundSize = bgSize;
const blockSize = width;
const quotedString = val => typeof val === 'string' ? `'${val}'` : val;
const border = function () {
  let suffix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return (node, _variables, prop) => {
    const response = {
      message: `The 'border${suffix}' property is not supported. Use the 'border${suffix}Width', 'border${suffix}Style' and 'border${suffix}Color' properties instead.`
    };
    if (node.type !== 'Literal' || prop == null) {
      return response;
    }
    if (typeof node.value === 'number') {
      response.suggest = {
        desc: `Replace 'border${suffix}' set to a number with 'border${suffix}Width' instead?`,
        fix: fixer => {
          return fixer.replaceText(prop, `border${suffix}Width: ${String(node.value)}`);
        }
      };
    }
    if (typeof node.value === 'string') {
      const [width, style, color] = (0, _splitCssValue.borderSplitter)(node.value);
      if (width != null || style != null || color != null) {
        response.suggest = {
          desc: `Replace 'border${suffix}' with 'border${suffix}Width', 'border${suffix}Style' and 'border${suffix}Color' instead?`,
          fix: fixer => {
            const newRules = [];
            if (width != null) {
              newRules.push(`border${suffix}Width: ${quotedString(width)}`);
            }
            if (style != null) {
              newRules.push(`border${suffix}Style: ${quotedString(style)}`);
            }
            if (color != null) {
              newRules.push(`border${suffix}Color: ${quotedString(color)}`);
            }
            return fixer.replaceText(prop, newRules.join(',\n    '));
          }
        };
      }
    }
    return response;
  };
};
const borderBottomLeftRadius = lengthPercentage;
const borderBottomRightRadius = lengthPercentage;
const borderBottomStyle = brStyle;
const borderBottomWidth = borderWidth;
const borderCollapse = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('collapse'), (0, _makeLiteralRule.default)('separate'));
const borderColor = color;
const borderImage = (0, _makeUnionRule.default)(borderImageSource, borderImageSlice, _isString.default, borderImageRepeat);
const borderLeftColor = color;
const borderLeftStyle = brStyle;
const borderLeftWidth = borderWidth;
const borderRadius = lengthPercentage;
const borderSpacing = isStringOrNumber;
const borderTopLeftRadius = lengthPercentage;
const borderTopRightRadius = lengthPercentage;
const borderTopStyle = brStyle;
const borderTopWidth = borderWidth;
const boxDecorationBreak = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('slice'), (0, _makeLiteralRule.default)('clone'));
const boxDirection = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('reverse'));
const boxFlex = isStringOrNumber;
const boxFlexGroup = isStringOrNumber;
const boxLines = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('single'), (0, _makeLiteralRule.default)('multiple'));
const boxOrdinalGroup = isStringOrNumber;
const boxOrient = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('horizontal'), (0, _makeLiteralRule.default)('vertical'), (0, _makeLiteralRule.default)('inline-axis'), (0, _makeLiteralRule.default)('block-axis'));
const boxShadow = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const boxSizing = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('content-box'), (0, _makeLiteralRule.default)('border-box'));
const boxSuppress = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('show'), (0, _makeLiteralRule.default)('discard'), (0, _makeLiteralRule.default)('hide'));
const breakAfter = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('avoid'), (0, _makeLiteralRule.default)('avoid-page'), (0, _makeLiteralRule.default)('page'), (0, _makeLiteralRule.default)('left'), (0, _makeLiteralRule.default)('right'), (0, _makeLiteralRule.default)('recto'), (0, _makeLiteralRule.default)('verso'), (0, _makeLiteralRule.default)('avoid-column'), (0, _makeLiteralRule.default)('column'), (0, _makeLiteralRule.default)('avoid-region'), (0, _makeLiteralRule.default)('region'));
const breakBefore = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('avoid'), (0, _makeLiteralRule.default)('avoid-page'), (0, _makeLiteralRule.default)('page'), (0, _makeLiteralRule.default)('left'), (0, _makeLiteralRule.default)('right'), (0, _makeLiteralRule.default)('recto'), (0, _makeLiteralRule.default)('verso'), (0, _makeLiteralRule.default)('avoid-column'), (0, _makeLiteralRule.default)('column'), (0, _makeLiteralRule.default)('avoid-region'), (0, _makeLiteralRule.default)('region'));
const breakInside = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('avoid'), (0, _makeLiteralRule.default)('avoid-page'), (0, _makeLiteralRule.default)('avoid-column'), (0, _makeLiteralRule.default)('avoid-region'));
const captionSide = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('top'), (0, _makeLiteralRule.default)('bottom'), (0, _makeLiteralRule.default)('block-start'), (0, _makeLiteralRule.default)('block-end'), (0, _makeLiteralRule.default)('inline-start'), (0, _makeLiteralRule.default)('inline-end'));
const clear = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('left'), (0, _makeLiteralRule.default)('right'), (0, _makeLiteralRule.default)('both'), (0, _makeLiteralRule.default)('inline-start'), (0, _makeLiteralRule.default)('inline-end'));
const clip = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('auto'));
const clipPath = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('none'));
const columnCount = (0, _makeUnionRule.default)(_isNumber.default, _isString.default, (0, _makeLiteralRule.default)('auto'));
const columnFill = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('balance'));
const columnGap = (0, _makeUnionRule.default)(_isNumber.default, _isString.default, (0, _makeLiteralRule.default)('normal'));
const columnSpan = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('all'));
const columnWidth = (0, _makeUnionRule.default)(_isNumber.default, _isString.default, (0, _makeLiteralRule.default)('auto'));
const columns = (0, _makeUnionRule.default)(columnWidth, columnCount);
const contain = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('strict'), (0, _makeLiteralRule.default)('content'), _isString.default);
const content = _isString.default;
const counterIncrement = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('none'));
const counterReset = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('none'));
const cursor = CSSCursor;
const direction = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('ltr'), (0, _makeLiteralRule.default)('rtl'));
const display = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('inline'), (0, _makeLiteralRule.default)('block'), (0, _makeLiteralRule.default)('list-item'), (0, _makeLiteralRule.default)('inline-list-item'), (0, _makeLiteralRule.default)('inline-block'), (0, _makeLiteralRule.default)('inline-table'), (0, _makeLiteralRule.default)('table'), (0, _makeLiteralRule.default)('table-cell'), (0, _makeLiteralRule.default)('table-column'), (0, _makeLiteralRule.default)('table-column-group'), (0, _makeLiteralRule.default)('table-footer-group'), (0, _makeLiteralRule.default)('table-header-group'), (0, _makeLiteralRule.default)('table-row'), (0, _makeLiteralRule.default)('table-row-group'), (0, _makeLiteralRule.default)('flex'), (0, _makeLiteralRule.default)('inline-flex'), (0, _makeLiteralRule.default)('grid'), (0, _makeLiteralRule.default)('inline-grid'), (0, _makeLiteralRule.default)('-webkit-box'), (0, _makeLiteralRule.default)('run-in'), (0, _makeLiteralRule.default)('ruby'), (0, _makeLiteralRule.default)('ruby-base'), (0, _makeLiteralRule.default)('ruby-text'), (0, _makeLiteralRule.default)('ruby-base-container'), (0, _makeLiteralRule.default)('ruby-text-container'), (0, _makeLiteralRule.default)('contents'));
const displayInside = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('block'), (0, _makeLiteralRule.default)('table'), (0, _makeLiteralRule.default)('flex'), (0, _makeLiteralRule.default)('grid'), (0, _makeLiteralRule.default)('ruby'));
const displayList = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('list-item'));
const displayOutside = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('block-level'), (0, _makeLiteralRule.default)('inline-level'), (0, _makeLiteralRule.default)('run-in'), (0, _makeLiteralRule.default)('contents'), (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('table-row-group'), (0, _makeLiteralRule.default)('table-header-group'), (0, _makeLiteralRule.default)('table-footer-group'), (0, _makeLiteralRule.default)('table-row'), (0, _makeLiteralRule.default)('table-cell'), (0, _makeLiteralRule.default)('table-column-group'), (0, _makeLiteralRule.default)('table-column'), (0, _makeLiteralRule.default)('table-caption'), (0, _makeLiteralRule.default)('ruby-base'), (0, _makeLiteralRule.default)('ruby-text'), (0, _makeLiteralRule.default)('ruby-base-container'), (0, _makeLiteralRule.default)('ruby-text-container'));
const fontFeatureSettings = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), _isString.default);
const fontKerning = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('none'));
const fontLanguageOverride = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), _isString.default);
const fontSize = (0, _makeUnionRule.default)(absoluteSize, relativeSize, lengthPercentage);
const fontSizeAdjust = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isNumber.default, _isString.default);
const fontStretch = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('ultra-condensed'), (0, _makeLiteralRule.default)('extra-condensed'), (0, _makeLiteralRule.default)('condensed'), (0, _makeLiteralRule.default)('semi-condensed'), (0, _makeLiteralRule.default)('semi-expanded'), (0, _makeLiteralRule.default)('expanded'), (0, _makeLiteralRule.default)('extra-expanded'), (0, _makeLiteralRule.default)('ultra-expanded'));
const fontStyle = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('italic'), (0, _makeLiteralRule.default)('oblique'));
const fontSynthesis = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const fontVariant = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('none'), _isString.default);
const fontVariantAlternates = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), _isString.default);
const fontVariantCaps = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('small-caps'), (0, _makeLiteralRule.default)('all-small-caps'), (0, _makeLiteralRule.default)('petite-caps'), (0, _makeLiteralRule.default)('all-petite-caps'), (0, _makeLiteralRule.default)('unicase'), (0, _makeLiteralRule.default)('titling-caps'));
const fontVariantEastAsian = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), _isString.default);
const fontVariantLigatures = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('none'), _isString.default);
const fontVariantNumeric = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), _isString.default);
const fontVariantPosition = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('sub'), (0, _makeLiteralRule.default)('super'));
const fontWeight = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('bold'), (0, _makeLiteralRule.default)('bolder'), (0, _makeLiteralRule.default)('lighter'), (0, _makeRangeRule.default)(1, 1000, 'a number between 1 and 1000'), _isCSSVariable.default);
const gap = isStringOrNumber;
const grid = (0, _makeUnionRule.default)(gridTemplate, _isString.default);
const gridArea = (0, _makeUnionRule.default)(gridLine, _isString.default);
const gridAutoColumns = trackSize;
const gridAutoFlow = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('dense'));
const gridAutoRows = trackSize;
const gridColumn = (0, _makeUnionRule.default)(gridLine, _isString.default);
const gridColumnEnd = gridLine;
const gridColumnGap = lengthPercentage;
const gridColumnStart = gridLine;
const gridGap = (0, _makeUnionRule.default)(gridRowGap, gridColumnGap);
const gridRow = (0, _makeUnionRule.default)(gridLine, _isString.default);
const gridRowEnd = gridLine;
const gridRowStart = gridLine;
const hyphens = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('manual'), (0, _makeLiteralRule.default)('auto'));
const imageOrientation = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('from-image'), _isNumber.default, _isString.default);
const imageRendering = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('crisp-edges'), (0, _makeLiteralRule.default)('pixelated'), (0, _makeLiteralRule.default)('optimizeSpeed'), (0, _makeLiteralRule.default)('optimizeQuality'), _isString.default);
const imageResolution = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('snap'));
const imeMode = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('active'), (0, _makeLiteralRule.default)('inactive'), (0, _makeLiteralRule.default)('disabled'));
const initialLetter = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), _isString.default);
const initialLetterAlign = _isString.default;
const inlineSize = width;
const isolation = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('isolate'));
const justifyContent = (0, _makeUnionRule.default)('center', 'start', 'end', 'flex-start', 'flex-end', 'left', 'right', 'normal', 'space-between', 'space-around', 'space-evenly', 'stretch', 'safe center', 'unsafe center');
const justifyItems = (0, _makeUnionRule.default)('normal', 'stretch', 'center', 'start', 'end', 'flex-start', 'flex-end', 'self-start', 'self-end', 'left', 'right', 'baseline', 'first baseline', 'last baseline', 'safe center', 'unsafe center', 'legacy right', 'legacy left', 'legacy center');
const justifySelf = (0, _makeUnionRule.default)('auto', 'normal', 'stretch', 'center', 'start', 'end', 'flex-start', 'flex-end', 'self-start', 'self-end', 'left', 'right', 'baseline', 'first baseline', 'last baseline', 'safe center', 'unsafe center');
const letterSpacing = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), lengthPercentage);
const lineBreak = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('loose'), (0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('strict'));
const lineHeight = isStringOrNumber;
const listStyleImage = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('none'));
const listStylePosition = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('inside'), (0, _makeLiteralRule.default)('outside'));
const listStyle = (0, _makeUnionRule.default)(listStyleType, listStylePosition, listStyleImage);
const margin = isStringOrNumber;
const marginLeft = (0, _makeUnionRule.default)(_isNumber.default, _isString.default, (0, _makeLiteralRule.default)('auto'));
const marginTop = (0, _makeUnionRule.default)(_isNumber.default, _isString.default, (0, _makeLiteralRule.default)('auto'));
const markerOffset = (0, _makeUnionRule.default)(_isNumber.default, (0, _makeLiteralRule.default)('auto'));
const mask = maskLayer;
const maskClip = _isString.default;
const maskComposite = compositeOperator;
const maskMode = maskingMode;
const maskOrigin = geometryBox;
const maskPosition = _isString.default;
const maskRepeat = repeatStyle;
const maskSize = bgSize;
const maskType = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('luminance'), (0, _makeLiteralRule.default)('alpha'));
const maxWidth = (0, _makeUnionRule.default)(_isNumber.default, _isString.default, (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('max-content'), (0, _makeLiteralRule.default)('min-content'), (0, _makeLiteralRule.default)('fit-content'), (0, _makeLiteralRule.default)('fill-available'));
const maxBlockSize = maxWidth;
const maxHeight = (0, _makeUnionRule.default)(_isNumber.default, _isString.default, (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('max-content'), (0, _makeLiteralRule.default)('min-content'), (0, _makeLiteralRule.default)('fit-content'), (0, _makeLiteralRule.default)('fill-available'));
const maxInlineSize = maxWidth;
const minWidth = (0, _makeUnionRule.default)(_isNumber.default, _isString.default, (0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('max-content'), (0, _makeLiteralRule.default)('min-content'), (0, _makeLiteralRule.default)('fit-content'), (0, _makeLiteralRule.default)('fill-available'));
const minBlockSize = minWidth;
const minHeight = (0, _makeUnionRule.default)(_isNumber.default, _isString.default, (0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('max-content'), (0, _makeLiteralRule.default)('min-content'), (0, _makeLiteralRule.default)('fit-content'), (0, _makeLiteralRule.default)('fill-available'));
const minInlineSize = minWidth;
const mixBlendMode = blendMode;
const motionPath = (0, _makeUnionRule.default)(_isString.default, geometryBox, (0, _makeLiteralRule.default)('none'));
const motionOffset = lengthPercentage;
const motionRotation = isStringOrNumber;
const motion = (0, _makeUnionRule.default)(motionPath, motionOffset, motionRotation);
const objectFit = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('fill'), (0, _makeLiteralRule.default)('contain'), (0, _makeLiteralRule.default)('cover'), (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('scale-down'));
const objectPosition = _isString.default;
const offsetBlockEnd = _isString.default;
const offsetBlockStart = _isString.default;
const offsetInlineEnd = _isString.default;
const offsetInlineStart = _isString.default;
const opacity = isStringOrNumber;
const order = isStringOrNumber;
const orphans = isStringOrNumber;
const outline = _isString.default;
const overflow = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('visible'), (0, _makeLiteralRule.default)('hidden'), (0, _makeLiteralRule.default)('clip'), (0, _makeLiteralRule.default)('scroll'), (0, _makeLiteralRule.default)('auto'));
const overflowAnchor = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('none'));
const overflowClipBox = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('padding-box'), (0, _makeLiteralRule.default)('content-box'));
const overflowWrap = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('break-word'), (0, _makeLiteralRule.default)('anywhere'));
const overflowX = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('visible'), (0, _makeLiteralRule.default)('hidden'), (0, _makeLiteralRule.default)('scroll'), (0, _makeLiteralRule.default)('auto'));
const overflowY = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('visible'), (0, _makeLiteralRule.default)('hidden'), (0, _makeLiteralRule.default)('scroll'), (0, _makeLiteralRule.default)('auto'));
const overscrollBehavior = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('contain'), (0, _makeLiteralRule.default)('auto'));
const overscrollBehaviorX = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('contain'), (0, _makeLiteralRule.default)('auto'));
const overscrollBehaviorY = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('contain'), (0, _makeLiteralRule.default)('auto'));
const padding = isStringOrNumber;
const paddingLeft = isStringOrNumber;
const paddingBottom = isStringOrNumber;
const paddingRight = isStringOrNumber;
const paddingTop = isStringOrNumber;
const pageBreakAfter = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('always'), (0, _makeLiteralRule.default)('avoid'), (0, _makeLiteralRule.default)('left'), (0, _makeLiteralRule.default)('right'));
const pageBreakBefore = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('always'), (0, _makeLiteralRule.default)('avoid'), (0, _makeLiteralRule.default)('left'), (0, _makeLiteralRule.default)('right'));
const pageBreakInside = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('avoid'));
const perspective = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isNumber.default);
const perspectiveOrigin = _isString.default;
const pointerEvents = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('visiblePainted'), (0, _makeLiteralRule.default)('visibleFill'), (0, _makeLiteralRule.default)('visibleStroke'), (0, _makeLiteralRule.default)('visible'), (0, _makeLiteralRule.default)('painted'), (0, _makeLiteralRule.default)('fill'), (0, _makeLiteralRule.default)('stroke'), (0, _makeLiteralRule.default)('all'));
const position = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('static'), (0, _makeLiteralRule.default)('relative'), (0, _makeLiteralRule.default)('absolute'), (0, _makeLiteralRule.default)('sticky'), (0, _makeLiteralRule.default)('fixed'));
const quotes = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('none'));
const resize = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('both'), (0, _makeLiteralRule.default)('horizontal'), (0, _makeLiteralRule.default)('vertical'));
const rowGap = isStringOrNumber;
const rubyAlign = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('start'), (0, _makeLiteralRule.default)('center'), (0, _makeLiteralRule.default)('space-between'), (0, _makeLiteralRule.default)('space-around'));
const rubyMerge = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('separate'), (0, _makeLiteralRule.default)('collapse'), (0, _makeLiteralRule.default)('auto'));
const rubyPosition = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('over'), (0, _makeLiteralRule.default)('under'), (0, _makeLiteralRule.default)('inter-character'));
const scrollBehavior = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('smooth'));
const scrollSnapPaddingBottom = isStringOrNumber;
const scrollSnapPaddingTop = isStringOrNumber;
const scrollSnapAlign = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('start'), (0, _makeLiteralRule.default)('end'), (0, _makeLiteralRule.default)('center'));
const scrollSnapType = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('x mandatory'), (0, _makeLiteralRule.default)('y mandatory'));
const shapeImageThreshold = isStringOrNumber;
const shapeMargin = lengthPercentage;
const shapeOutside = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), shapeBox, _isString.default);
const tabSize = isStringOrNumber;
const tableLayout = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('fixed'));
const textAlign = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('start'), (0, _makeLiteralRule.default)('end'), (0, _makeLiteralRule.default)('left'), (0, _makeLiteralRule.default)('right'), (0, _makeLiteralRule.default)('center'), (0, _makeLiteralRule.default)('justify'), (0, _makeLiteralRule.default)('match-parent'));
const textAlignLast = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('start'), (0, _makeLiteralRule.default)('end'), (0, _makeLiteralRule.default)('left'), (0, _makeLiteralRule.default)('right'), (0, _makeLiteralRule.default)('center'), (0, _makeLiteralRule.default)('justify'));
const textCombineUpright = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('all'), _isString.default);
const textDecorationColor = color;
const textDecorationLine = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('underline'), (0, _makeLiteralRule.default)('overline'), (0, _makeLiteralRule.default)('line-through'), (0, _makeLiteralRule.default)('blink'), _isString.default);
const textDecorationStyle = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('solid'), (0, _makeLiteralRule.default)('double'), (0, _makeLiteralRule.default)('dotted'), (0, _makeLiteralRule.default)('dashed'), (0, _makeLiteralRule.default)('wavy'));
const textDecoration = (0, _makeUnionRule.default)(textDecorationLine, textDecorationStyle, textDecorationColor);
const textEmphasisColor = color;
const textEmphasisPosition = _isString.default;
const textEmphasisStyle = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('filled'), (0, _makeLiteralRule.default)('open'), (0, _makeLiteralRule.default)('dot'), (0, _makeLiteralRule.default)('circle'), (0, _makeLiteralRule.default)('double-circle'), (0, _makeLiteralRule.default)('triangle'), (0, _makeLiteralRule.default)('filled sesame'), (0, _makeLiteralRule.default)('open sesame'), _isString.default);
const textEmphasis = (0, _makeUnionRule.default)(textEmphasisStyle, textEmphasisColor);
const textIndent = (0, _makeUnionRule.default)(lengthPercentage, (0, _makeLiteralRule.default)('hanging'), (0, _makeLiteralRule.default)('each-line'));
const textOrientation = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('mixed'), (0, _makeLiteralRule.default)('upright'), (0, _makeLiteralRule.default)('sideways'));
const textOverflow = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('clip'), (0, _makeLiteralRule.default)('ellipsis'), _isString.default);
const textRendering = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('optimizeSpeed'), (0, _makeLiteralRule.default)('optimizeLegibility'), (0, _makeLiteralRule.default)('geometricPrecision'));
const textShadow = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const textSizeAdjust = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('auto'), _isString.default);
const textTransform = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('capitalize'), (0, _makeLiteralRule.default)('uppercase'), (0, _makeLiteralRule.default)('lowercase'), (0, _makeLiteralRule.default)('full-width'));
const textUnderlinePosition = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('under'), (0, _makeLiteralRule.default)('left'), (0, _makeLiteralRule.default)('right'), _isString.default);
const textUnderlineOffset = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), isLength, _isPercentage.default);
const touchAction = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('none'), _isString.default, (0, _makeLiteralRule.default)('manipulation'));
const transform = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const transformBox = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('border-box'), (0, _makeLiteralRule.default)('fill-box'), (0, _makeLiteralRule.default)('view-box'), (0, _makeLiteralRule.default)('content-box'), (0, _makeLiteralRule.default)('stroke-box'));
const transformOrigin = isStringOrNumber;
const transformStyle = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('flat'), (0, _makeLiteralRule.default)('preserve-3d'));
const transitionDelay = time;
const transitionDuration = time;
const transitionProperty = _isString.default;
const transitionTimingFunction = singleTransitionTimingFunction;
const unicodeBidi = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('embed'), (0, _makeLiteralRule.default)('isolate'), (0, _makeLiteralRule.default)('bidi-override'), (0, _makeLiteralRule.default)('isolate-override'), (0, _makeLiteralRule.default)('plaintext'));
const userSelect = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('text'), (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('contain'), (0, _makeLiteralRule.default)('all'));
const verticalAlign = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('baseline'), (0, _makeLiteralRule.default)('sub'), (0, _makeLiteralRule.default)('super'), (0, _makeLiteralRule.default)('text-top'), (0, _makeLiteralRule.default)('text-bottom'), (0, _makeLiteralRule.default)('middle'), (0, _makeLiteralRule.default)('top'), (0, _makeLiteralRule.default)('bottom'), _isString.default, _isNumber.default);
const visibility = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('visible'), (0, _makeLiteralRule.default)('hidden'), (0, _makeLiteralRule.default)('collapse'));
const whiteSpace = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('pre'), (0, _makeLiteralRule.default)('nowrap'), (0, _makeLiteralRule.default)('pre-wrap'), (0, _makeLiteralRule.default)('pre-line'), (0, _makeLiteralRule.default)('break-spaces'));
const widows = isStringOrNumber;
const animatableFeature = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('scroll-position'), (0, _makeLiteralRule.default)('contents'), _isString.default);
const willChange = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), animatableFeature);
const nonStandardWordBreak = (0, _makeLiteralRule.default)('break-word');
const wordBreak = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('break-all'), (0, _makeLiteralRule.default)('keep-all'), nonStandardWordBreak);
const wordSpacing = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), lengthPercentage);
const wordWrap = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('break-word'));
const svgWritingMode = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('lr-tb'), (0, _makeLiteralRule.default)('rl-tb'), (0, _makeLiteralRule.default)('tb-rl'), (0, _makeLiteralRule.default)('lr'), (0, _makeLiteralRule.default)('rl'), (0, _makeLiteralRule.default)('tb'));
const writingMode = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('horizontal-tb'), (0, _makeLiteralRule.default)('vertical-rl'), (0, _makeLiteralRule.default)('vertical-lr'), (0, _makeLiteralRule.default)('sideways-rl'), (0, _makeLiteralRule.default)('sideways-lr'), svgWritingMode);
const zIndex = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), _isNumber.default);
const alignmentBaseline = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('baseline'), (0, _makeLiteralRule.default)('before-edge'), (0, _makeLiteralRule.default)('text-before-edge'), (0, _makeLiteralRule.default)('middle'), (0, _makeLiteralRule.default)('central'), (0, _makeLiteralRule.default)('after-edge'), (0, _makeLiteralRule.default)('text-after-edge'), (0, _makeLiteralRule.default)('ideographic'), (0, _makeLiteralRule.default)('alphabetic'), (0, _makeLiteralRule.default)('hanging'), (0, _makeLiteralRule.default)('mathematical'));
const svgLength = isStringOrNumber;
const baselineShift = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('baseline'), (0, _makeLiteralRule.default)('sub'), (0, _makeLiteralRule.default)('super'), svgLength);
const behavior = _isString.default;
const clipRule = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('nonzero'), (0, _makeLiteralRule.default)('evenodd'));
const cueAfter = (0, _makeUnionRule.default)(isStringOrNumber, (0, _makeLiteralRule.default)('none'));
const cueBefore = (0, _makeUnionRule.default)(isStringOrNumber, (0, _makeLiteralRule.default)('none'));
const cue = (0, _makeUnionRule.default)(cueBefore, cueAfter);
const dominantBaseline = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('use-script'), (0, _makeLiteralRule.default)('no-change'), (0, _makeLiteralRule.default)('reset-size'), (0, _makeLiteralRule.default)('ideographic'), (0, _makeLiteralRule.default)('alphabetic'), (0, _makeLiteralRule.default)('hanging'), (0, _makeLiteralRule.default)('mathematical'), (0, _makeLiteralRule.default)('central'), (0, _makeLiteralRule.default)('middle'), (0, _makeLiteralRule.default)('text-after-edge'), (0, _makeLiteralRule.default)('text-before-edge'));
const paint = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('currentColor'), color, _isString.default);
const fill = paint;
const fillOpacity = isStringOrNumber;
const fillRule = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('nonzero'), (0, _makeLiteralRule.default)('evenodd'));
const glyphOrientationHorizontal = isStringOrNumber;
const glyphOrientationVertical = isStringOrNumber;
const kerning = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), svgLength);
const marker = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const markerEnd = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const markerMid = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const markerStart = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const pauseAfter = (0, _makeUnionRule.default)(_isNumber.default, (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('x-weak'), (0, _makeLiteralRule.default)('weak'), (0, _makeLiteralRule.default)('medium'), (0, _makeLiteralRule.default)('strong'), (0, _makeLiteralRule.default)('x-strong'));
const pauseBefore = (0, _makeUnionRule.default)(_isNumber.default, (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('x-weak'), (0, _makeLiteralRule.default)('weak'), (0, _makeLiteralRule.default)('medium'), (0, _makeLiteralRule.default)('strong'), (0, _makeLiteralRule.default)('x-strong'));
const pause = (0, _makeUnionRule.default)(pauseBefore, pauseAfter);
const restAfter = (0, _makeUnionRule.default)(_isNumber.default, (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('x-weak'), (0, _makeLiteralRule.default)('weak'), (0, _makeLiteralRule.default)('medium'), (0, _makeLiteralRule.default)('strong'), (0, _makeLiteralRule.default)('x-strong'));
const restBefore = (0, _makeUnionRule.default)(_isNumber.default, (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('x-weak'), (0, _makeLiteralRule.default)('weak'), (0, _makeLiteralRule.default)('medium'), (0, _makeLiteralRule.default)('strong'), (0, _makeLiteralRule.default)('x-strong'));
const rest = (0, _makeUnionRule.default)(restBefore, restAfter);
const shapeRendering = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('optimizeSpeed'), (0, _makeLiteralRule.default)('crispEdges'), (0, _makeLiteralRule.default)('geometricPrecision'));
const src = _isString.default;
const speak = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('normal'));
const speakAs = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('spell-out'), (0, _makeLiteralRule.default)('digits'), _isString.default);
const stroke = paint;
const strokeDasharray = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), _isString.default);
const strokeDashoffset = svgLength;
const strokeLinecap = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('butt'), (0, _makeLiteralRule.default)('round'), (0, _makeLiteralRule.default)('square'));
const strokeLinejoin = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('miter'), (0, _makeLiteralRule.default)('round'), (0, _makeLiteralRule.default)('bevel'));
const strokeMiterlimit = isStringOrNumber;
const strokeOpacity = isStringOrNumber;
const strokeWidth = svgLength;
const textAnchor = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('start'), (0, _makeLiteralRule.default)('middle'), (0, _makeLiteralRule.default)('end'));
const unicodeRange = _isString.default;
const voiceBalance = (0, _makeUnionRule.default)(_isNumber.default, (0, _makeLiteralRule.default)('left'), (0, _makeLiteralRule.default)('center'), (0, _makeLiteralRule.default)('right'), (0, _makeLiteralRule.default)('leftwards'), (0, _makeLiteralRule.default)('rightwards'));
const voiceDuration = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('auto'), time);
const voiceFamily = (0, _makeUnionRule.default)(_isString.default, (0, _makeLiteralRule.default)('preserve'));
const voicePitch = (0, _makeUnionRule.default)(_isNumber.default, (0, _makeLiteralRule.default)('absolute'), _isString.default);
const voiceRange = (0, _makeUnionRule.default)(_isNumber.default, (0, _makeLiteralRule.default)('absolute'), _isString.default);
const voiceRate = _isString.default;
const voiceStress = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('normal'), (0, _makeLiteralRule.default)('strong'), (0, _makeLiteralRule.default)('moderate'), (0, _makeLiteralRule.default)('none'), (0, _makeLiteralRule.default)('reduced'));
const voiceVolume = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('silent'), _isString.default);
const maskImage = maskReference;
const top = isStringOrNumber;
const SupportedVendorSpecificCSSProperties = {
  MozOsxFontSmoothing: (0, _makeLiteralRule.default)('grayscale'),
  WebkitFontSmoothing: (0, _makeLiteralRule.default)('antialiased'),
  WebkitAppearance: (0, _makeLiteralRule.default)('textfield'),
  WebkitTapHighlightColor: color,
  WebkitOverflowScrolling: (0, _makeLiteralRule.default)('touch'),
  WebkitBoxOrient: (0, _makeUnionRule.default)('horizontal', 'vertical', 'inline-axis', 'block-axis'),
  WebkitLineClamp: isStringOrNumber,
  WebkitMaskImage: maskImage,
  WebkitTextFillColor: color,
  textFillColor: color,
  WebkitTextStrokeWidth: borderWidth,
  WebkitTextStrokeColor: color,
  WebkitBackgroundClip: (0, _makeUnionRule.default)('border-box', 'padding-box', 'content-box', 'text')
};
const SVGProperties = {
  colorInterpolation: (0, _makeUnionRule.default)('auto', 'sRGB', 'linearRGB'),
  fill: fill,
  fillOpacity: fillOpacity,
  fillRule: fillRule,
  floodColor: color,
  floodOpacity: opacity,
  stopColor: color,
  stopOpacity: opacity,
  stroke: stroke,
  strokeDasharray: strokeDasharray,
  strokeDashoffset: strokeDashoffset,
  strokeLinecap: strokeLinecap,
  strokeLinejoin: strokeLinejoin,
  strokeMiterlimit: strokeMiterlimit,
  strokeOpacity: strokeOpacity,
  strokeWidth: strokeWidth,
  vectorEffect: (0, _makeUnionRule.default)('none', 'non-scaling-stroke', 'non-scaling-size', 'non-rotation', 'fixed-position')
};
const CSSProperties = {
  ...SupportedVendorSpecificCSSProperties,
  ...SVGProperties,
  accentColor: color,
  alignTracks: _isString.default,
  alignContent: alignContent,
  alignItems: alignItems,
  alignSelf: alignSelf,
  alignmentBaseline: alignmentBaseline,
  all: all,
  animation: showError('`animation` is not recommended. Please use `animationName`, `animationDuration`, etc. instead'),
  animationComposition: (0, _makeUnionRule.default)('replace', 'add', 'accumulate'),
  animationDelay: animationDelay,
  animationDirection: animationDirection,
  animationDuration: animationDuration,
  animationFillMode: animationFillMode,
  animationIterationCount: animationIterationCount,
  animationPlayState: animationPlayState,
  animationTimingFunction: animationTimingFunction,
  animationTimeline: _isString.default,
  appearance: appearance,
  aspectRatio: isStringOrNumber,
  backdropFilter: backdropFilter,
  backfaceVisibility: backfaceVisibility,
  background: _isString.default,
  backgroundAttachment: backgroundAttachment,
  backgroundBlendMode: backgroundBlendMode,
  backgroundClip: backgroundClip,
  backgroundColor: backgroundColor,
  backgroundImage: backgroundImage,
  backgroundOrigin: backgroundOrigin,
  backgroundPosition: backgroundPosition,
  backgroundPositionX: backgroundPositionX,
  backgroundPositionY: backgroundPositionY,
  backgroundRepeat: backgroundRepeat,
  backgroundSize: backgroundSize,
  baselineShift: baselineShift,
  behavior: behavior,
  borderBottomEndRadius: borderBottomRightRadius,
  borderEndEndRadius: borderBottomRightRadius,
  borderBottomLeftRadius: borderBottomRightRadius,
  borderEndStartRadius: borderBottomRightRadius,
  borderBottomRightRadius: borderBottomRightRadius,
  borderBottomStartRadius: borderBottomLeftRadius,
  borderCollapse: borderCollapse,
  borderImage: borderImage,
  borderImageWidth: borderImageWidth,
  borderImageOutset: borderImageOutset,
  borderImageRepeat: borderImageRepeat,
  borderImageSlice: borderImageSlice,
  borderImageSource: borderImageSource,
  borderWidth: borderWidth,
  borderStyle: borderStyle,
  borderColor: borderColor,
  borderTopWidth: borderTopWidth,
  borderTopStyle: borderTopStyle,
  borderTopColor: color,
  borderBottomWidth: borderBottomWidth,
  borderBottomStyle: borderBottomStyle,
  borderBottomColor: color,
  borderLeftColor: borderLeftColor,
  borderLeftStyle: borderLeftStyle,
  borderLeftWidth: borderLeftWidth,
  borderRightColor: borderLeftColor,
  borderRightStyle: borderLeftStyle,
  borderRightWidth: borderLeftWidth,
  borderInlineEnd: showError(['`borderInlineEnd` is not supported. Please use', '  - `borderInlineEndWidth`,', '  - `borderInlineEndStyle` and', '  - `borderInlineEndColor` instead'].join('\n')),
  borderInlineColor: borderLeftColor,
  borderInlineStyle: borderLeftStyle,
  borderInlineWidth: borderLeftWidth,
  borderInlineEndColor: borderLeftColor,
  borderInlineEndStyle: borderLeftStyle,
  borderInlineEndWidth: borderLeftWidth,
  borderInlineStart: showError(['`borderInlineStart` is not supported. Please use', '  - `borderInlineStartWidth`,', '  - `borderInlineStartStyle` and', '  - `borderInlineStartColor` instead'].join('\n')),
  borderInlineStartColor: borderLeftColor,
  borderInlineStartStyle: borderLeftStyle,
  borderInlineStartWidth: borderLeftWidth,
  borderBlockEnd: showError(['`borderBlockEnd` is not supported. Please use', '  - `borderBlockEndWidth`,', '  - `borderBlockEndStyle` and', '  - `borderBlockEndColor` instead'].join('\n')),
  borderBlockColor: borderLeftColor,
  borderBlockStyle: borderLeftStyle,
  borderBlockWidth: borderLeftWidth,
  borderBlockEndColor: borderLeftColor,
  borderBlockEndStyle: borderLeftStyle,
  borderBlockEndWidth: borderLeftWidth,
  borderBlockStart: showError(['`borderBlockStart` is not supported. Please use', '  - `borderBlockStartWidth`,', '  - `borderBlockStartStyle` and', '  - `borderBlockStartColor` instead'].join('\n')),
  borderBlockStartColor: borderLeftColor,
  borderBlockStartStyle: borderLeftStyle,
  borderBlockStartWidth: borderLeftWidth,
  borderSpacing: borderSpacing,
  borderRadius: borderRadius,
  borderTopEndRadius: borderTopRightRadius,
  borderStartStartRadius: borderTopRightRadius,
  borderTopLeftRadius: borderTopRightRadius,
  borderStartEndRadius: borderTopRightRadius,
  borderTopRightRadius: borderTopRightRadius,
  borderTopStartRadius: borderTopLeftRadius,
  boxAlign: boxAlign,
  boxDecorationBreak: boxDecorationBreak,
  boxDirection: boxDirection,
  boxFlex: boxFlex,
  boxFlexGroup: boxFlexGroup,
  boxLines: boxLines,
  boxOrdinalGroup: boxOrdinalGroup,
  boxOrient: boxOrient,
  boxShadow: boxShadow,
  boxSizing: boxSizing,
  boxSuppress: boxSuppress,
  breakAfter: breakAfter,
  breakBefore: breakBefore,
  breakInside: breakInside,
  captionSide: captionSide,
  caretColor: color,
  clear: clear,
  clip: clip,
  clipPath: clipPath,
  clipRule: clipRule,
  color: color,
  colorAdjust: (0, _makeUnionRule.default)('economy', 'exact'),
  colorScheme: (0, _makeUnionRule.default)('light', 'dark', 'light dark'),
  columnCount: columnCount,
  columnFill: columnFill,
  columnGap: columnGap,
  columnRule: columnRule,
  columnRuleColor: columnRuleColor,
  columnRuleStyle: columnRuleStyle,
  columnRuleWidth: columnRuleWidth,
  columnSpan: columnSpan,
  columnWidth: columnWidth,
  columns: columns,
  contain: contain,
  containerType: (0, _makeUnionRule.default)('normal', 'size', 'inline-size'),
  containerName: _isString.default,
  content: content,
  contentVisibility: (0, _makeUnionRule.default)('visible', 'hidden', 'auto'),
  counterIncrement: counterIncrement,
  counterReset: counterReset,
  counterSet: _isString.default,
  cue: cue,
  cueAfter: cueAfter,
  cueBefore: cueBefore,
  cursor: cursor,
  direction: direction,
  display: display,
  displayInside: displayInside,
  displayList: displayList,
  displayOutside: displayOutside,
  dominantBaseline: dominantBaseline,
  emptyCells: emptyCells,
  filter: filter,
  flex: _isString.default,
  flexBasis: flexBasis,
  flexDirection: flexDirection,
  flexFlow: flexFlow,
  flexGrow: flexGrow,
  flexShrink: flexShrink,
  flexWrap: flexWrap,
  float: float,
  font: showError('`font` is not recommended. Please use `fontSize`, `fontFamily`, `fontStyle` etc. instead'),
  fontFamily: fontFamily,
  fontFeatureSettings: fontFeatureSettings,
  fontKerning: fontKerning,
  fontLanguageOverride: fontLanguageOverride,
  fontOpticalSizing: (0, _makeUnionRule.default)('auto', 'none'),
  fontPalette: _isString.default,
  fontSize: fontSize,
  fontSizeAdjust: fontSizeAdjust,
  fontSmooth: (0, _makeUnionRule.default)('auto', 'never', 'always', lengthPercentage),
  fontStretch: fontStretch,
  fontStyle: fontStyle,
  fontSynthesis: fontSynthesis,
  fontVariant: fontVariant,
  fontVariantAlternates: fontVariantAlternates,
  fontVariantCaps: fontVariantCaps,
  fontVariantEastAsian: fontVariantEastAsian,
  fontVariantEmoji: (0, _makeUnionRule.default)('auto', 'text', 'emoji', 'unicode'),
  fontVariantLigatures: fontVariantLigatures,
  fontVariantNumeric: fontVariantNumeric,
  fontVariantPosition: fontVariantPosition,
  fontVariationSettings: _isString.default,
  fontWeight: fontWeight,
  forcedColorAdjust: (0, _makeUnionRule.default)('auto', 'none'),
  gap: gap,
  glyphOrientationHorizontal: glyphOrientationHorizontal,
  glyphOrientationVertical: glyphOrientationVertical,
  grid: grid,
  gridArea: gridArea,
  gridAutoColumns: gridAutoColumns,
  gridAutoFlow: gridAutoFlow,
  gridAutoRows: gridAutoRows,
  gridColumn: gridColumn,
  gridColumnEnd: gridColumnEnd,
  gridColumnGap: gridColumnGap,
  gridColumnStart: gridColumnStart,
  gridRow: gridRow,
  gridRowEnd: gridRowEnd,
  gridGap: gridGap,
  gridRowGap: gridRowGap,
  gridRowStart: gridRowStart,
  gridTemplate: gridTemplate,
  gridTemplateAreas: gridTemplateAreas,
  gridTemplateColumns: gridTemplateColumns,
  gridTemplateRows: gridTemplateRows,
  hangingPunctuation: (0, _makeUnionRule.default)('none', 'first', 'last', 'allow-end', 'force-end', _isString.default),
  hyphenateCharacter: _isString.default,
  hyphens: hyphens,
  imageOrientation: imageOrientation,
  imageRendering: imageRendering,
  imageResolution: imageResolution,
  imeMode: imeMode,
  initialLetter: initialLetter,
  initialLetterAlign: initialLetterAlign,
  inset: isStringOrNumber,
  top: top,
  right: isStringOrNumber,
  bottom: isStringOrNumber,
  left: isStringOrNumber,
  end: isStringOrNumber,
  start: isStringOrNumber,
  insetBlock: isStringOrNumber,
  insetBlockStart: top,
  insetBlockEnd: isStringOrNumber,
  insetInline: isStringOrNumber,
  insetInlineStart: isStringOrNumber,
  insetInlineEnd: isStringOrNumber,
  height: isStringOrNumber,
  width: width,
  blockSize: blockSize,
  inlineSize: inlineSize,
  maxHeight: maxHeight,
  maxWidth: maxWidth,
  maxBlockSize: maxBlockSize,
  maxInlineSize: maxInlineSize,
  minBlockSize: minBlockSize,
  minHeight: minHeight,
  minInlineSize: minInlineSize,
  minWidth: minWidth,
  isolation: isolation,
  justifyContent: justifyContent,
  justifyItems: justifyItems,
  justifySelf: justifySelf,
  kerning: kerning,
  letterSpacing: letterSpacing,
  lineBreak: lineBreak,
  lineHeight: lineHeight,
  listStyle: listStyle,
  listStyleImage: listStyleImage,
  listStylePosition: listStylePosition,
  listStyleType: listStyleType,
  margin: margin,
  marginBlock: marginLeft,
  marginBlockEnd: marginLeft,
  marginBlockStart: marginLeft,
  marginBottom: marginLeft,
  marginInline: marginLeft,
  marginInlineEnd: marginLeft,
  marginInlineStart: marginLeft,
  marginLeft: marginLeft,
  marginRight: marginLeft,
  marginTop: marginTop,
  marker: marker,
  markerEnd: markerEnd,
  markerMid: markerMid,
  markerOffset: markerOffset,
  markerStart: markerStart,
  mask: mask,
  maskBorderMode: (0, _makeUnionRule.default)('alpha', 'luminance'),
  maskBorderOutset: _isString.default,
  maskBorderRepeat: (0, _makeUnionRule.default)('stretch', 'repeat', 'round', 'space'),
  maskBorderSlice: _isString.default,
  maskBorderSource: _isString.default,
  maskBorderWidth: _isString.default,
  maskClip: maskClip,
  maskComposite: maskComposite,
  maskImage: maskImage,
  maskMode: maskMode,
  maskOrigin: maskOrigin,
  maskPosition: maskPosition,
  maskRepeat: maskRepeat,
  maskSize: maskSize,
  maskType: maskType,
  mixBlendMode: mixBlendMode,
  motion: motion,
  motionOffset: motionOffset,
  motionPath: motionPath,
  motionRotation: motionRotation,
  objectFit: objectFit,
  objectPosition: objectPosition,
  offsetAnchor: _isString.default,
  offsetPath: _isString.default,
  offsetDistance: width,
  offsetBlockEnd: offsetBlockEnd,
  offsetBlockStart: offsetBlockStart,
  offsetInlineEnd: offsetInlineEnd,
  offsetInlineStart: offsetInlineStart,
  offsetRotate: _isString.default,
  opacity: opacity,
  order: order,
  orphans: orphans,
  outline: outline,
  outlineColor: color,
  outlineOffset: isLength,
  outlineStyle: (0, _makeUnionRule.default)('auto', 'none', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'),
  outlineWidth: isLength,
  blockOverflow: overflow,
  inlineOverflow: overflow,
  overflow: overflow,
  overflowAnchor: overflowAnchor,
  overflowClipBox: overflowClipBox,
  overflowWrap: overflowWrap,
  overflowX: overflowX,
  overflowY: overflowY,
  overscrollBehavior: overscrollBehavior,
  overscrollBehaviorX: overscrollBehaviorX,
  overscrollBehaviorY: overscrollBehaviorY,
  overflowClipMargin: _isString.default,
  paintOrder: (0, _makeUnionRule.default)('normal', 'fill', 'stroke', 'markers', _isString.default),
  padding: padding,
  paddingBlock: paddingTop,
  paddingBlockEnd: paddingTop,
  paddingBlockStart: paddingTop,
  paddingBottom: paddingBottom,
  paddingInline: paddingLeft,
  paddingInlineEnd: paddingLeft,
  paddingInlineStart: paddingLeft,
  paddingLeft: paddingLeft,
  paddingRight: paddingRight,
  paddingTop: paddingTop,
  pageBreakAfter: pageBreakAfter,
  pageBreakBefore: pageBreakBefore,
  pageBreakInside: pageBreakInside,
  pause: pause,
  pauseAfter: pauseAfter,
  pauseBefore: pauseBefore,
  perspective: perspective,
  perspectiveOrigin: perspectiveOrigin,
  pointerEvents: pointerEvents,
  position: position,
  placeContent: _isString.default,
  placeItems: _isString.default,
  placeSelf: _isString.default,
  printColorAdjust: (0, _makeUnionRule.default)('economy', 'exact'),
  quotes: quotes,
  resize: resize,
  rest: rest,
  restAfter: restAfter,
  restBefore: restBefore,
  rotate: _isString.default,
  scale: (0, _makeUnionRule.default)(_isString.default, _isNumber.default),
  translate: (0, _makeUnionRule.default)(_isString.default, _isNumber.default),
  rowGap: rowGap,
  rubyAlign: rubyAlign,
  rubyMerge: rubyMerge,
  rubyPosition: rubyPosition,
  scrollbarColor: color,
  scrollbarGutter: (0, _makeUnionRule.default)('auto', 'stable', 'stable both-edges'),
  scrollbarWidth: (0, _makeUnionRule.default)('auto', 'thin', 'none'),
  scrollBehavior: scrollBehavior,
  scrollSnapPaddingBottom: scrollSnapPaddingBottom,
  scrollSnapPaddingTop: scrollSnapPaddingTop,
  scrollSnapAlign: scrollSnapAlign,
  scrollSnapType: scrollSnapType,
  scrollSnapStop: (0, _makeUnionRule.default)('normal', 'always'),
  scrollMarginBlockEnd: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollMarginBlockStart: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollMarginBottom: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollMarginInlineEnd: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollMarginInlineStart: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollMarginLeft: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollMarginRight: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollMarginTop: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollPaddingBlockEnd: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollPaddingBlockStart: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollPaddingBottom: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollPaddingInlineEnd: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollPaddingInlineStart: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollPaddingLeft: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollPaddingRight: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollPaddingTop: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollSnapMarginBottom: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollSnapMarginLeft: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollSnapMarginRight: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  scrollSnapMarginTop: (0, _makeUnionRule.default)(_isNumber.default, _isString.default),
  shapeImageThreshold: shapeImageThreshold,
  shapeMargin: shapeMargin,
  shapeOutside: shapeOutside,
  shapeRendering: shapeRendering,
  speak: speak,
  speakAs: speakAs,
  src: src,
  tabSize: tabSize,
  tableLayout: tableLayout,
  textAlign: textAlign,
  textAlignLast: textAlignLast,
  textAnchor: textAnchor,
  textCombineUpright: textCombineUpright,
  textDecoration: textDecoration,
  textDecorationColor: color,
  textDecorationLine: _isString.default,
  textDecorationSkip: (0, _makeUnionRule.default)('none', 'objects', 'spaces', 'leading-spaces', 'trailing-spaces', 'edges', 'box-decoration'),
  textDecorationSkipInk: (0, _makeUnionRule.default)('none', 'auto', 'all'),
  textDecorationStyle: (0, _makeUnionRule.default)('solid', 'double', 'dotted', 'dashed', 'wavy'),
  textDecorationThickness: isLength,
  textEmphasis: textEmphasis,
  textEmphasisColor: textEmphasisColor,
  textEmphasisPosition: textEmphasisPosition,
  textEmphasisStyle: textEmphasisStyle,
  textIndent: textIndent,
  textOrientation: textOrientation,
  textOverflow: textOverflow,
  textRendering: textRendering,
  textShadow: textShadow,
  textSizeAdjust: textSizeAdjust,
  textTransform: textTransform,
  textUnderlineOffset: textUnderlineOffset,
  textUnderlinePosition: textUnderlinePosition,
  textWrap: (0, _makeUnionRule.default)('wrap', 'nowrap', 'balance', 'pretty'),
  touchAction: touchAction,
  transform: transform,
  transformBox: transformBox,
  transformOrigin: transformOrigin,
  transformStyle: transformStyle,
  transition: _isString.default,
  transitionDelay: transitionDelay,
  transitionDuration: transitionDuration,
  transitionProperty: transitionProperty,
  transitionTimingFunction: transitionTimingFunction,
  unicodeBidi: unicodeBidi,
  unicodeRange: unicodeRange,
  userSelect: userSelect,
  verticalAlign: verticalAlign,
  visibility: visibility,
  voiceBalance: voiceBalance,
  voiceDuration: voiceDuration,
  voiceFamily: voiceFamily,
  voicePitch: voicePitch,
  voiceRange: voiceRange,
  voiceRate: voiceRate,
  voiceStress: voiceStress,
  voiceVolume: voiceVolume,
  whiteSpace: whiteSpace,
  widows: widows,
  willChange: willChange,
  wordBreak: wordBreak,
  wordSpacing: wordSpacing,
  wordWrap: wordWrap,
  writingMode: writingMode,
  zIndex: zIndex,
  zoom: (0, _makeUnionRule.default)('normal', 'reset', _isNumber.default, _isPercentage.default)
};
const CSSPropertyKeys = Object.keys(CSSProperties);
for (const key of CSSPropertyKeys) {
  CSSProperties[key] = (0, _makeUnionRule.default)(CSSProperties[key], all);
}
const CSSPropertyReplacements = {
  border: border(),
  borderTop: border('Top'),
  borderBlockStart: border('Top'),
  borderEnd: border('InlineEnd'),
  borderInlineEnd: border('InlineEnd'),
  borderRight: border('Right'),
  borderBottom: border('Bottom'),
  borderBlockEnd: border('Bottom'),
  borderStart: border('InlineStart'),
  borderInlineStart: border('InlineStart'),
  borderLeft: border('Left')
};
const pseudoElements = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('::before'), (0, _makeLiteralRule.default)('::after'), (0, _makeLiteralRule.default)('::first-letter'), (0, _makeLiteralRule.default)('::first-line'), (0, _makeLiteralRule.default)('::selection'), (0, _makeLiteralRule.default)('::backdrop'), (0, _makeLiteralRule.default)('::marker'), (0, _makeLiteralRule.default)('::placeholder'), (0, _makeLiteralRule.default)('::spelling-error'), (0, _makeLiteralRule.default)('::grammar-error'), (0, _makeLiteralRule.default)('::cue'), (0, _makeLiteralRule.default)('::slotted'), (0, _makeLiteralRule.default)('::part'), (0, _makeLiteralRule.default)('::thumb'), (0, _makeLiteralRule.default)('::-webkit-inner-spin-button'), (0, _makeLiteralRule.default)('::-webkit-outer-spin-button'), (0, _makeLiteralRule.default)('::-webkit-search-decoration'), (0, _makeLiteralRule.default)('::-webkit-search-cancel-button'), (0, _makeLiteralRule.default)('::-webkit-search-results-button'), (0, _makeLiteralRule.default)('::-webkit-search-results-decoration'), (0, _makeLiteralRule.default)('::-webkit-scrollbar'), (0, _makeLiteralRule.default)('::-webkit-scrollbar-button'), (0, _makeLiteralRule.default)('::-webkit-scrollbar-thumb'), (0, _makeLiteralRule.default)('::-webkit-scrollbar-track'), (0, _makeLiteralRule.default)('::-webkit-scrollbar-track-piece'), (0, _makeLiteralRule.default)('::-webkit-scrollbar-corner'), (0, _makeLiteralRule.default)('::-webkit-resizer'));
const pseudoClassesAndAtRules = (0, _makeUnionRule.default)((0, _makeLiteralRule.default)(':first-child'), (0, _makeLiteralRule.default)(':last-child'), (0, _makeLiteralRule.default)(':only-child'), (0, _makeLiteralRule.default)(':nth-child'), (0, _makeLiteralRule.default)(':nth-of-type'), (0, _makeLiteralRule.default)(':hover'), (0, _makeLiteralRule.default)(':focus'), (0, _makeLiteralRule.default)(':focus-visible'), (0, _makeLiteralRule.default)(':active'), (0, _makeLiteralRule.default)(':visited'), (0, _makeLiteralRule.default)(':disabled'), (0, _makeRegExRule.default)(/^@media/, 'a media query'), (0, _makeRegExRule.default)(/^@container/, 'a media query'), (0, _makeRegExRule.default)(/^@supports/, 'a supports query'));
const allModifiers = (0, _makeUnionRule.default)(pseudoElements, pseudoClassesAndAtRules);
const stylexValidStyles = {
  meta: {
    type: 'problem',
    hasSuggestions: true,
    docs: {
      descriptions: 'Enforce that you create valid stylex styles',
      category: 'Possible Errors',
      recommended: true
    },
    schema: [{
      type: 'object',
      properties: {
        validImports: {
          type: 'array',
          items: {
            type: 'string'
          },
          default: ['stylex', '@stylexjs/stylex']
        },
        allowOuterPseudoAndMedia: {
          type: 'boolean',
          default: false
        },
        banPropsForLegacy: {
          type: 'boolean',
          default: false
        },
        propLimits: {
          type: 'object',
          additionalProperties: {
            type: 'object',
            properties: {
              limit: {
                oneOf: [{
                  type: 'null'
                }, {
                  type: 'string'
                }, {
                  type: 'number'
                }, {
                  type: 'array',
                  items: {
                    oneOf: [{
                      type: 'null'
                    }, {
                      type: 'string'
                    }, {
                      type: 'number'
                    }]
                  }
                }]
              },
              reason: {
                type: 'string'
              }
            }
          }
        }
      }
    }]
  },
  create(context) {
    const variables = new Map();
    const dynamicStyleVariables = new Set();
    const legacyReason = 'This property is not supported in legacy StyleX resolution.';
    const legacyProps = {
      'grid*': {
        limit: null,
        reason: legacyReason
      },
      rowGap: {
        limit: null,
        reason: legacyReason
      },
      columnGap: {
        limit: null,
        reason: legacyReason
      },
      'mask+([a-zA-Z])': {
        limit: null,
        reason: legacyReason
      },
      blockOverflow: {
        limit: null,
        reason: legacyReason
      },
      inlineOverflow: {
        limit: null,
        reason: legacyReason
      },
      transitionProperty: {
        limit: ['opacity', 'transform', 'opacity, transform', 'none'],
        reason: legacyReason
      }
    };
    const {
      validImports: importsToLookFor = ['stylex', '@stylexjs/stylex'],
      allowOuterPseudoAndMedia,
      banPropsForLegacy = false,
      propLimits = {}
    } = context.options[0] || {};
    const stylexDefineVarsFileExtension = '.stylex';
    const stylexDefineVarsTokenImports = new Set();
    const styleXDefaultImports = new Set();
    const styleXCreateImports = new Set();
    const styleXKeyframesImports = new Set();
    const overrides = {
      ...(banPropsForLegacy ? legacyProps : {}),
      ...propLimits
    };
    const CSSPropertiesWithOverrides = {
      ...CSSProperties,
      animationName: (0, _makeUnionRule.default)((0, _makeLiteralRule.default)('none'), (0, _isAnimationName.default)(styleXDefaultImports, styleXKeyframesImports), all)
    };
    for (const overrideKey in overrides) {
      const {
        limit,
        reason
      } = overrides[overrideKey];
      const overrideValue = limit === null ? showError(reason) : limit === '*' ? (0, _makeUnionRule.default)(_isString.default, _isNumber.default, all) : limit === 'string' ? (0, _makeUnionRule.default)(_isString.default, all) : limit === 'number' ? (0, _makeUnionRule.default)(_isNumber.default, all) : typeof limit === 'string' || typeof limit === 'number' ? (0, _makeUnionRule.default)(limit, all) : Array.isArray(limit) ? (0, _makeUnionRule.default)(...limit.map(l => {
        if (l === '*') {
          return (0, _makeUnionRule.default)(_isString.default, _isNumber.default);
        }
        if (l === 'string') {
          return _isString.default;
        }
        if (l === 'number') {
          return _isNumber.default;
        }
        return l;
      }), all) : undefined;
      if (overrideValue === undefined) {
        continue;
      }
      if (overrideKey.includes('*') || overrideKey.includes('+')) {
        for (const key in CSSPropertiesWithOverrides) {
          if (_micromatch.default.isMatch(key, overrideKey)) {
            CSSPropertiesWithOverrides[key] = overrideValue;
          }
        }
      } else {
        CSSPropertiesWithOverrides[overrideKey] = overrideValue;
      }
    }
    function isStylexCallee(node) {
      return node.type === 'MemberExpression' && node.object.type === 'Identifier' && styleXDefaultImports.has(node.object.name) && node.property.type === 'Identifier' && node.property.name === 'create' || node.type === 'Identifier' && styleXCreateImports.has(node.name);
    }
    function isStylexDeclaration(node) {
      return node && node.type === 'CallExpression' && isStylexCallee(node.callee) && node.arguments.length === 1;
    }
    function checkStyleProperty(style, level, propName) {
      if (style.type === 'Property') {
        if (style.value.type === 'ObjectExpression') {
          const styleValue = style.value;
          if (level > 0 && propName == null) {
            return context.report({
              node: style.value,
              loc: style.value.loc,
              message: 'You cannot nest styles more than one level deep'
            });
          }
          const key = style.key;
          if (key.type === 'PrivateIdentifier') {
            return context.report({
              node: key,
              loc: key.loc,
              message: 'Private properties are not allowed in stylex'
            });
          }
          const keyName = key.type === 'Literal' ? key.value : key.type === 'Identifier' ? !style.computed ? key.name : (0, _resolveKey.default)(key, variables) : null;
          if ((0, _isStylexDefineVarsToken.default)(key, stylexDefineVarsTokenImports)) {
            return undefined;
          }
          if (typeof keyName !== 'string' || key.type !== 'Literal' && key.type !== 'Identifier') {
            return context.report({
              node: key,
              loc: key.loc,
              message: 'Keys must be strings'
            });
          }
          if (keyName.startsWith('@') || keyName.startsWith(':')) {
            if (level === 0) {
              const ruleCheck = (allowOuterPseudoAndMedia ? allModifiers : pseudoElements)(key, variables);
              if (ruleCheck !== undefined) {
                if (keyName.startsWith('::')) {
                  return context.report({
                    node: style.value,
                    loc: style.value.loc,
                    message: `Unknown pseudo element "${keyName}"`
                  });
                }
                return context.report({
                  node: style.value,
                  loc: style.value.loc,
                  message: allowOuterPseudoAndMedia ? 'Nested styles can only be used for the pseudo selectors in the stylex allowlist and for @media queries' : 'Pseudo Classes, Media Queries and other At Rules should be nested as conditions within style properties. Only Pseudo Elements (::after) are allowed at the top-level'
                });
              }
            } else {
              const ruleCheck = pseudoClassesAndAtRules(key, variables);
              if (ruleCheck !== undefined) {
                return context.report({
                  node: style.value,
                  loc: style.value.loc,
                  message: 'Invalid Pseudo class or At Rule used for conditional style value'
                });
              }
            }
          }
          return styleValue.properties.forEach(prop => checkStyleProperty(prop, level + 1, propName ?? (keyName.startsWith('@') || keyName.startsWith(':') || keyName === 'default' ? null : keyName)));
        }
        let styleKey = style.key;
        if (styleKey.type === 'PrivateIdentifier') {
          return context.report({
            node: styleKey,
            loc: styleKey.loc,
            message: 'Private properties are not allowed in stylex'
          });
        }
        if ((0, _isStylexDefineVarsToken.default)(styleKey, stylexDefineVarsTokenImports)) {
          return undefined;
        }
        if (style.computed && styleKey.type !== 'Literal') {
          const val = (0, _evaluate.default)(styleKey, variables);
          if (val == null) {
            return context.report({
              node: style.key,
              loc: style.key.loc,
              message: 'Computed key cannot be resolved.'
            });
          } else if (val === 'ARG') {
            return context.report({
              node: style.key,
              loc: style.key.loc,
              message: 'Computed key cannot depend on function argument'
            });
          } else {
            styleKey = val;
          }
        }
        if (styleKey.type !== 'Literal' && styleKey.type !== 'Identifier') {
          return context.report({
            node: styleKey,
            loc: styleKey.loc,
            message: 'All keys in a stylex object must be static literal values.'
          });
        }
        const key = propName ?? (styleKey.type === 'Identifier' ? styleKey.name : styleKey.value);
        if (typeof key !== 'string') {
          return context.report({
            node: styleKey,
            loc: styleKey.loc,
            message: 'All keys in a stylex object must be static literal string values.'
          });
        }
        if (CSSPropertyReplacements[key] != null) {
          const propCheck = CSSPropertyReplacements[key];
          const val = style;
          const check = propCheck(style.value, variables, style);
          if (check != null) {
            const {
              message,
              suggest
            } = check;
            const diagnostic = {
              node: style,
              loc: style.loc,
              message,
              suggest: suggest != null ? [suggest] : undefined
            };
            return context.report(diagnostic);
          }
        }
        const ruleChecker = CSSPropertiesWithOverrides[key];
        if (ruleChecker == null) {
          const closestKey = CSSPropertyKeys.find(cssProp => {
            const distance = (0, _getDistance.default)(key, cssProp, 2);
            return distance <= 2;
          });
          return context.report({
            node: style.key,
            loc: style.key.loc,
            message: 'This is not a key that is allowed by stylex',
            suggest: closestKey != null ? [{
              desc: `Did you mean "${closestKey}"?`,
              fix: fixer => {
                if (style.key.type === 'Identifier') {
                  return fixer.replaceText(style.key, closestKey);
                } else if (style.key.type === 'Literal' && (typeof style.key.value === 'string' || typeof style.key.value === 'number' || typeof style.key.value === 'boolean' || style.key.value == null)) {
                  const styleKey = style.key;
                  const raw = style.key.raw;
                  if (raw != null) {
                    const quoteType = raw.substr(0, 1);
                    return fixer.replaceText(styleKey, `${quoteType}${closestKey}${quoteType}`);
                  }
                }
                return null;
              }
            }] : undefined
          });
        }
        if (typeof ruleChecker !== 'function') {
          throw new TypeError(`CSSProperties[${key}] is not a function`);
        }
        const isReferencingStylexDefineVarsTokens = stylexDefineVarsTokenImports.size > 0 && (0, _isStylexDefineVarsToken.default)(style.value, stylexDefineVarsTokenImports);
        if (!isReferencingStylexDefineVarsTokens) {
          let varsWithFnArgs = variables;
          if (dynamicStyleVariables.size > 0) {
            varsWithFnArgs = new Map();
            for (const [key, value] of variables) {
              varsWithFnArgs.set(key, value);
            }
            for (const key of dynamicStyleVariables) {
              varsWithFnArgs.set(key, 'ARG');
            }
          }
          const check = ruleChecker(style.value, varsWithFnArgs, style);
          if (check != null) {
            const {
              message,
              suggest
            } = check;
            return context.report({
              node: style.value,
              loc: style.value.loc,
              message: `${key} value must be one of:\n${message}${key === 'lineHeight' ? '\nBe careful when fixing: lineHeight: 10px is not the same as lineHeight: 10' : ''}`,
              suggest: suggest != null ? [suggest] : undefined
            });
          }
          if (style.value.type === 'Literal' && typeof style.value.value === 'string' && (0, _isWhiteSpaceOrEmpty.default)(style.value.value) && styleKey.name !== 'content') {
            return context.report({
              node: style.value,
              loc: style.value.loc,
              message: 'The empty string is not allowed by Stylex.'
            });
          }
        }
      }
    }
    return {
      Program(node) {
        const vars = node.body.reduce((collection, node) => {
          if (node.type === 'VariableDeclaration') {
            collection.push(node);
          }
          return collection;
        }, []).map(constDecl => constDecl.declarations).reduce((arr, curr) => arr.concat(curr), []);
        const [requires, others] = vars.reduce((acc, decl) => {
          if (decl.init != null && decl.init.type === 'CallExpression' && decl.init.callee.type === 'Identifier' && decl.init.callee.name === 'require') {
            acc[0].push(decl);
          } else {
            acc[1].push(decl);
          }
          return acc;
        }, [[], []]);
        requires.forEach(decl => {
          if (decl.init != null && decl.init.type === 'CallExpression' && decl.init.callee.type === 'Identifier' && decl.init.callee.name === 'require' && decl.init.arguments.length === 1 && decl.init.arguments[0].type === 'Literal' && importsToLookFor.includes(decl.init.arguments[0].value)) {
            if (decl.id.type === 'Identifier') {
              styleXDefaultImports.add(decl.id.name);
            }
            if (decl.id.type === 'ObjectPattern') {
              decl.id.properties.forEach(prop => {
                if (prop.type === 'Property' && prop.key.type === 'Identifier' && prop.key.name === 'create' && !prop.computed && prop.value.type === 'Identifier') {
                  styleXCreateImports.add(prop.value.name);
                }
              });
            }
          }
        });
        others.filter(decl => decl.id.type === 'Identifier').forEach(decl => {
          const id = decl.id.type === 'Identifier' ? decl.id : null;
          const init = decl.init;
          if (id != null && init != null) {
            variables.set(id.name, init);
          }
        });
      },
      ImportDeclaration(node) {
        if (node.source.type !== 'Literal' || typeof node.source.value !== 'string') {
          return;
        }
        const sourceValue = node.source.value;
        const isStylexImport = importsToLookFor.includes(sourceValue);
        const isStylexDefineVarsImport = sourceValue.endsWith(stylexDefineVarsFileExtension);
        if (!(isStylexImport || isStylexDefineVarsImport)) {
          return;
        }
        if (isStylexImport) {
          node.specifiers.forEach(specifier => {
            if (specifier.type === 'ImportDefaultSpecifier' || specifier.type === 'ImportNamespaceSpecifier') {
              styleXDefaultImports.add(specifier.local.name);
            }
            if (specifier.type === 'ImportSpecifier' && specifier.imported.name === 'create') {
              styleXCreateImports.add(specifier.local.name);
            }
            if (specifier.type === 'ImportSpecifier' && specifier.imported.name === 'keyframes') {
              styleXKeyframesImports.add(specifier.local.name);
            }
          });
        }
        if (isStylexDefineVarsImport) {
          node.specifiers.forEach(specifier => {
            if (specifier.type === 'ImportSpecifier') {
              stylexDefineVarsTokenImports.add(specifier.local.name);
            }
          });
        }
      },
      CallExpression(node) {
        if (!isStylexDeclaration(node)) {
          return;
        }
        const namespaces = node.arguments[0];
        if (namespaces.type !== 'ObjectExpression') {
          return context.report({
            node: namespaces,
            loc: namespaces.loc,
            message: 'Styles must be represented as JavaScript objects'
          });
        }
        namespaces.properties.forEach(namespace => {
          if (namespace.type !== 'Property') {
            return context.report({
              node: namespace,
              loc: namespace.loc,
              message: 'Styles cannot be spread objects'
            });
          }
          let styles = namespace.value;
          if (styles.type !== 'ObjectExpression') {
            if (styles.type === 'ArrowFunctionExpression' && (styles.body.type === 'ObjectExpression' || styles.body.type === 'TSAsExpression' && styles.body.expression.type === 'ObjectExpression')) {
              const params = styles.params;
              styles = styles.body;
              if (styles.type === 'TSAsExpression') {
                styles = styles.expression;
              }
              if (params.some(param => param.type !== 'Identifier')) {
                return params.filter(param => param.type !== 'Identifier').forEach(param => {
                  context.report({
                    node: param,
                    loc: param.loc,
                    message: 'Dynamic Styles can only accept named parameters. Destructuring, spreading or default parameters are not allowed.'
                  });
                });
              }
              params.forEach(param => {
                if (param.type === 'Identifier') {
                  dynamicStyleVariables.add(param.name);
                }
              });
            } else {
              return context.report({
                node: namespace.value,
                loc: namespace.value.loc,
                message: 'Styles must be represented as JavaScript objects, not ' + styles.type
              });
            }
          }
          styles.properties.forEach(prop => checkStyleProperty(prop, 0, null));
          dynamicStyleVariables.clear();
        });
      },
      'Program:exit'() {
        variables.clear();
      }
    };
  }
};
var _default = exports.default = stylexValidStyles;