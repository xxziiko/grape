"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = splitValue;
var _postcssValueParser = _interopRequireDefault(require("postcss-value-parser"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function printNode(node) {
  switch (node.type) {
    case 'word':
    case 'string':
      return `${node.value}`;
    case 'function':
      return `${node.value}(${node.nodes.map(printNode).join('')})`;
    default:
      return node.value;
  }
}
function splitValue(str) {
  let allowImportant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  let processedStr = str;
  if (str == null || typeof str !== 'string' && typeof str !== 'number') {
    return [str];
  }
  if (typeof str === 'number') {
    processedStr = String(str);
  }
  if (Array.isArray(processedStr)) {
    return processedStr;
  }
  if (typeof processedStr !== 'string') {
    return [processedStr];
  }
  const parsed = (0, _postcssValueParser.default)(processedStr.trim());
  const nodes = parsed.nodes.filter(node => node.type !== 'space' && node.type !== 'div').map(printNode);
  if (typeof str === 'number') {
    const processedNodes = nodes.map(parseFloat);
    return processedNodes;
  }
  if (nodes.length > 1 && nodes[nodes.length - 1].toLowerCase() === '!important' && allowImportant) {
    return nodes.slice(0, nodes.length - 1).map(node => node + ' !important');
  }
  return nodes;
}