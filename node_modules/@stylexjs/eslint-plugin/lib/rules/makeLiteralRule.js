"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = makeLiteralRule;
var _getDistance = _interopRequireDefault(require("../utils/getDistance"));
var _makeVariableCheckingRule = _interopRequireDefault(require("../utils/makeVariableCheckingRule"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const MAX_DISTANCE = 4;
function makeLiteralRule(value) {
  function literalChecker(node, _variables) {
    const defaultFailure = {
      message: `${value ?? 'null'}`
    };
    if (node.type === 'Literal') {
      if (node.value === value) {
        return undefined;
      }
      const distance = typeof node.value === 'string' && typeof value === 'string' ? (0, _getDistance.default)(value, node.value, MAX_DISTANCE) : Infinity;
      const suggest = distance < MAX_DISTANCE ? {
        desc: `Did you mean "${value ?? 'null'}"? Replace "${String(node.value)}" with "${value ?? 'null'}"`,
        fix: fixer => {
          const raw = node.raw;
          if (raw != null) {
            const quoteType = raw.substr(0, 1);
            return fixer.replaceText(node, `${quoteType}${value ?? 'null'}${quoteType}`);
          }
          return null;
        }
      } : undefined;
      return {
        ...defaultFailure,
        distance: distance,
        suggest
      };
    }
    return defaultFailure;
  }
  return (0, _makeVariableCheckingRule.default)(literalChecker);
}