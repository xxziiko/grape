/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

import type { Expression, Pattern, Property } from 'estree';
import { Rule } from 'eslint';
export type Variables = ReadonlyMap<string, Expression | 'ARG'>;
export type RuleCheck = (
  node: Readonly<Expression | Pattern>,
  variables?: Variables,
  prop?: Readonly<Property>,
) => RuleResponse;
export type RuleResponse = void | {
  message: string;
  distance?: number;
  suggest?: { fix: Rule.ReportFixer; desc: string };
};
declare const stylexValidStyles: {
  meta: {
    type: 'problem';
    hasSuggestions: true;
    docs: {
      descriptions: 'Enforce that you create valid stylex styles';
      category: 'Possible Errors';
      recommended: true;
    };
    schema: any;
  };
  create(context: Rule.RuleContext): {};
};
declare const $$EXPORT_DEFAULT_DECLARATION$$: typeof stylexValidStyles;
export default $$EXPORT_DEFAULT_DECLARATION$$;
