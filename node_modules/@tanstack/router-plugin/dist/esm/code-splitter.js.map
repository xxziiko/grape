{"version":3,"file":"code-splitter.js","sources":["../../src/code-splitter.ts"],"sourcesContent":["import { isAbsolute, join } from 'node:path'\nimport { fileURLToPath, pathToFileURL } from 'node:url'\n\nimport {\n  compileCodeSplitReferenceRoute,\n  compileCodeSplitVirtualRoute,\n} from './compilers'\nimport { getConfig } from './config'\nimport { splitPrefix } from './constants'\n\nimport type { Config } from './config'\nimport type { UnpluginContextMeta, UnpluginFactory } from 'unplugin'\n\nfunction capitalizeFirst(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n\nfunction fileIsInRoutesDirectory(filePath: string, routesDirectory: string) {\n  const routesDirectoryPath = isAbsolute(routesDirectory)\n    ? routesDirectory\n    : join(process.cwd(), routesDirectory)\n\n  return filePath.startsWith(routesDirectoryPath)\n}\n\ntype BannedBeforeExternalPlugin = {\n  identifier: string\n  pkg: string\n  usage: string\n  frameworks: Array<UnpluginContextMeta['framework']>\n}\n\nconst bannedBeforeExternalPlugins: Array<BannedBeforeExternalPlugin> = [\n  {\n    identifier: '@react-refresh',\n    pkg: '@vitejs/plugin-react',\n    usage: 'viteReact()',\n    frameworks: ['vite'],\n  },\n]\n\nclass FoundPluginInBeforeCode extends Error {\n  constructor(externalPlugin: BannedBeforeExternalPlugin, framework: string) {\n    super(`We detected that the '${externalPlugin.pkg}' was passed before '@tanstack/router-plugin'. Please make sure that '@tanstack/router-plugin' is passed before '${externalPlugin.pkg}' and try again: \ne.g.\nplugins: [\n  TanStackRouter${capitalizeFirst(framework)}(), // Place this before ${externalPlugin.usage}\n  ${externalPlugin.usage},\n]\n`)\n  }\n}\n\nconst PLUGIN_NAME = 'unplugin:router-code-splitter'\nconst JoinedSplitPrefix = splitPrefix + ':'\n\nexport const unpluginRouterCodeSplitterFactory: UnpluginFactory<\n  Partial<Config> | undefined\n> = (options = {}, { framework }) => {\n  const debug = Boolean(process.env.TSR_VITE_DEBUG)\n\n  let ROOT: string = process.cwd()\n  let userConfig = options as Config\n\n  const handleSplittingFile = (code: string, id: string) => {\n    if (debug) console.info('Splitting route: ', id)\n\n    const compiledVirtualRoute = compileCodeSplitVirtualRoute({\n      code,\n      root: ROOT,\n      filename: id,\n    })\n\n    if (debug) console.info('')\n    if (debug) console.info('Split Output')\n    if (debug) console.info('')\n    if (debug) console.info(compiledVirtualRoute.code)\n    if (debug) console.info('')\n    if (debug) console.info('')\n    if (debug) console.info('')\n\n    return compiledVirtualRoute\n  }\n\n  const handleCompilingFile = (code: string, id: string) => {\n    if (debug) console.info('Handling createRoute: ', id)\n\n    const compiledReferenceRoute = compileCodeSplitReferenceRoute({\n      code,\n      root: ROOT,\n      filename: id,\n    })\n\n    if (debug) console.info('')\n    if (debug) console.info('Compiled Output')\n    if (debug) console.info('')\n    if (debug) console.info(compiledReferenceRoute.code)\n    if (debug) console.info('')\n    if (debug) console.info('')\n    if (debug) console.info('')\n\n    return compiledReferenceRoute\n  }\n\n  return {\n    name: 'router-code-splitter-plugin',\n    enforce: 'pre',\n\n    resolveId(source) {\n      if (!userConfig.experimental?.enableCodeSplitting) {\n        return null\n      }\n\n      if (source.startsWith(splitPrefix + ':')) {\n        return source.replace(splitPrefix + ':', '')\n      }\n      return null\n    },\n\n    async transform(code, id) {\n      if (!userConfig.experimental?.enableCodeSplitting) {\n        return null\n      }\n\n      const url = pathToFileURL(id)\n      url.searchParams.delete('v')\n      id = fileURLToPath(url).replace(/\\\\/g, '/')\n\n      if (id.includes(splitPrefix)) {\n        return await handleSplittingFile(code, id)\n      } else if (\n        fileIsInRoutesDirectory(id, userConfig.routesDirectory) &&\n        (code.includes('createRoute(') || code.includes('createFileRoute('))\n      ) {\n        for (const externalPlugin of bannedBeforeExternalPlugins) {\n          if (!externalPlugin.frameworks.includes(framework)) {\n            continue\n          }\n\n          if (code.includes(externalPlugin.identifier)) {\n            throw new FoundPluginInBeforeCode(externalPlugin, framework)\n          }\n        }\n\n        return await handleCompilingFile(code, id)\n      }\n\n      return null\n    },\n\n    transformInclude(transformId) {\n      if (!userConfig.experimental?.enableCodeSplitting) {\n        return undefined\n      }\n\n      let id = transformId\n\n      if (id.startsWith(JoinedSplitPrefix)) {\n        id = id.replace(JoinedSplitPrefix, '')\n      }\n\n      if (\n        fileIsInRoutesDirectory(id, userConfig.routesDirectory) ||\n        id.includes(splitPrefix)\n      ) {\n        return true\n      }\n      return false\n    },\n\n    vite: {\n      configResolved(config) {\n        ROOT = config.root\n        userConfig = getConfig(options, ROOT)\n      },\n    },\n\n    rspack(compiler) {\n      ROOT = process.cwd()\n\n      compiler.hooks.beforeCompile.tap(PLUGIN_NAME, (self) => {\n        self.normalModuleFactory.hooks.beforeResolve.tap(\n          PLUGIN_NAME,\n          (resolveData) => {\n            if (resolveData.request.includes(JoinedSplitPrefix)) {\n              resolveData.request = resolveData.request.replace(\n                JoinedSplitPrefix,\n                '',\n              )\n            }\n          },\n        )\n      })\n\n      userConfig = getConfig(options, ROOT)\n    },\n\n    webpack(compiler) {\n      ROOT = process.cwd()\n\n      compiler.hooks.beforeCompile.tap(PLUGIN_NAME, (self) => {\n        self.normalModuleFactory.hooks.beforeResolve.tap(\n          PLUGIN_NAME,\n          (resolveData) => {\n            if (resolveData.request.includes(JoinedSplitPrefix)) {\n              resolveData.request = resolveData.request.replace(\n                JoinedSplitPrefix,\n                '',\n              )\n            }\n          },\n        )\n      })\n\n      userConfig = getConfig(options, ROOT)\n\n      if (\n        userConfig.experimental?.enableCodeSplitting &&\n        compiler.options.mode === 'production'\n      ) {\n        compiler.hooks.done.tap(PLUGIN_NAME, (stats) => {\n          console.info('âœ… ' + PLUGIN_NAME + ': code-splitting done!')\n          setTimeout(() => {\n            process.exit(0)\n          })\n        })\n      }\n    },\n  }\n}\n"],"names":[],"mappings":"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"}