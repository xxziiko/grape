import { isAbsolute, join } from "node:path";
import { pathToFileURL, fileURLToPath } from "node:url";
import { compileCodeSplitVirtualRoute, compileCodeSplitReferenceRoute } from "./compilers.js";
import { getConfig } from "./config.js";
import { splitPrefix } from "./constants.js";
function capitalizeFirst(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function fileIsInRoutesDirectory(filePath, routesDirectory) {
  const routesDirectoryPath = isAbsolute(routesDirectory) ? routesDirectory : join(process.cwd(), routesDirectory);
  return filePath.startsWith(routesDirectoryPath);
}
const bannedBeforeExternalPlugins = [
  {
    identifier: "@react-refresh",
    pkg: "@vitejs/plugin-react",
    usage: "viteReact()",
    frameworks: ["vite"]
  }
];
class FoundPluginInBeforeCode extends Error {
  constructor(externalPlugin, framework) {
    super(`We detected that the '${externalPlugin.pkg}' was passed before '@tanstack/router-plugin'. Please make sure that '@tanstack/router-plugin' is passed before '${externalPlugin.pkg}' and try again: 
e.g.
plugins: [
  TanStackRouter${capitalizeFirst(framework)}(), // Place this before ${externalPlugin.usage}
  ${externalPlugin.usage},
]
`);
  }
}
const PLUGIN_NAME = "unplugin:router-code-splitter";
const JoinedSplitPrefix = splitPrefix + ":";
const unpluginRouterCodeSplitterFactory = (options = {}, { framework }) => {
  const debug = Boolean(process.env.TSR_VITE_DEBUG);
  let ROOT = process.cwd();
  let userConfig = options;
  const handleSplittingFile = (code, id) => {
    if (debug) console.info("Splitting route: ", id);
    const compiledVirtualRoute = compileCodeSplitVirtualRoute({
      code,
      root: ROOT,
      filename: id
    });
    if (debug) console.info("");
    if (debug) console.info("Split Output");
    if (debug) console.info("");
    if (debug) console.info(compiledVirtualRoute.code);
    if (debug) console.info("");
    if (debug) console.info("");
    if (debug) console.info("");
    return compiledVirtualRoute;
  };
  const handleCompilingFile = (code, id) => {
    if (debug) console.info("Handling createRoute: ", id);
    const compiledReferenceRoute = compileCodeSplitReferenceRoute({
      code,
      root: ROOT,
      filename: id
    });
    if (debug) console.info("");
    if (debug) console.info("Compiled Output");
    if (debug) console.info("");
    if (debug) console.info(compiledReferenceRoute.code);
    if (debug) console.info("");
    if (debug) console.info("");
    if (debug) console.info("");
    return compiledReferenceRoute;
  };
  return {
    name: "router-code-splitter-plugin",
    enforce: "pre",
    resolveId(source) {
      var _a;
      if (!((_a = userConfig.experimental) == null ? void 0 : _a.enableCodeSplitting)) {
        return null;
      }
      if (source.startsWith(splitPrefix + ":")) {
        return source.replace(splitPrefix + ":", "");
      }
      return null;
    },
    async transform(code, id) {
      var _a;
      if (!((_a = userConfig.experimental) == null ? void 0 : _a.enableCodeSplitting)) {
        return null;
      }
      const url = pathToFileURL(id);
      url.searchParams.delete("v");
      id = fileURLToPath(url).replace(/\\/g, "/");
      if (id.includes(splitPrefix)) {
        return await handleSplittingFile(code, id);
      } else if (fileIsInRoutesDirectory(id, userConfig.routesDirectory) && (code.includes("createRoute(") || code.includes("createFileRoute("))) {
        for (const externalPlugin of bannedBeforeExternalPlugins) {
          if (!externalPlugin.frameworks.includes(framework)) {
            continue;
          }
          if (code.includes(externalPlugin.identifier)) {
            throw new FoundPluginInBeforeCode(externalPlugin, framework);
          }
        }
        return await handleCompilingFile(code, id);
      }
      return null;
    },
    transformInclude(transformId) {
      var _a;
      if (!((_a = userConfig.experimental) == null ? void 0 : _a.enableCodeSplitting)) {
        return void 0;
      }
      let id = transformId;
      if (id.startsWith(JoinedSplitPrefix)) {
        id = id.replace(JoinedSplitPrefix, "");
      }
      if (fileIsInRoutesDirectory(id, userConfig.routesDirectory) || id.includes(splitPrefix)) {
        return true;
      }
      return false;
    },
    vite: {
      configResolved(config) {
        ROOT = config.root;
        userConfig = getConfig(options, ROOT);
      }
    },
    rspack(compiler) {
      ROOT = process.cwd();
      compiler.hooks.beforeCompile.tap(PLUGIN_NAME, (self) => {
        self.normalModuleFactory.hooks.beforeResolve.tap(
          PLUGIN_NAME,
          (resolveData) => {
            if (resolveData.request.includes(JoinedSplitPrefix)) {
              resolveData.request = resolveData.request.replace(
                JoinedSplitPrefix,
                ""
              );
            }
          }
        );
      });
      userConfig = getConfig(options, ROOT);
    },
    webpack(compiler) {
      var _a;
      ROOT = process.cwd();
      compiler.hooks.beforeCompile.tap(PLUGIN_NAME, (self) => {
        self.normalModuleFactory.hooks.beforeResolve.tap(
          PLUGIN_NAME,
          (resolveData) => {
            if (resolveData.request.includes(JoinedSplitPrefix)) {
              resolveData.request = resolveData.request.replace(
                JoinedSplitPrefix,
                ""
              );
            }
          }
        );
      });
      userConfig = getConfig(options, ROOT);
      if (((_a = userConfig.experimental) == null ? void 0 : _a.enableCodeSplitting) && compiler.options.mode === "production") {
        compiler.hooks.done.tap(PLUGIN_NAME, (stats) => {
          console.info("âœ… " + PLUGIN_NAME + ": code-splitting done!");
          setTimeout(() => {
            process.exit(0);
          });
        });
      }
    }
  };
};
export {
  unpluginRouterCodeSplitterFactory
};
//# sourceMappingURL=code-splitter.js.map
