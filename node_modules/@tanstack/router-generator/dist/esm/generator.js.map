{"version":3,"file":"generator.js","sources":["../../src/generator.ts"],"sourcesContent":["import path from 'node:path'\nimport * as fs from 'node:fs'\nimport * as fsp from 'node:fs/promises'\nimport * as prettier from 'prettier'\nimport { cleanPath, logging, trimPathLeft } from './utils'\nimport type { Config } from './config'\n\nlet latestTask = 0\nexport const rootPathId = '__root'\nconst routeGroupPatternRegex = /\\(.+\\)/g\nconst possiblyNestedRouteGroupPatternRegex = /\\([^/]+\\)\\/?/g\nconst disallowedRouteGroupConfiguration = /\\(([^)]+)\\).(ts|js|tsx|jsx)/\n\nexport type RouteNode = {\n  filePath: string\n  fullPath: string\n  variableName: string\n  routePath?: string\n  cleanedPath?: string\n  path?: string\n  isNonPath?: boolean\n  isNonLayout?: boolean\n  isLayout?: boolean\n  isVirtualParentRequired?: boolean\n  isVirtualParentRoute?: boolean\n  isRoute?: boolean\n  isLoader?: boolean\n  isComponent?: boolean\n  isErrorComponent?: boolean\n  isPendingComponent?: boolean\n  isVirtual?: boolean\n  isLazy?: boolean\n  isRoot?: boolean\n  children?: Array<RouteNode>\n  parent?: RouteNode\n}\n\nasync function getRouteNodes(config: Config) {\n  const { routeFilePrefix, routeFileIgnorePrefix, routeFileIgnorePattern } =\n    config\n  const logger = logging({ disabled: config.disableLogging })\n  const routeFileIgnoreRegExp = new RegExp(routeFileIgnorePattern ?? '', 'g')\n\n  const routeNodes: Array<RouteNode> = []\n\n  async function recurse(dir: string) {\n    const fullDir = path.resolve(config.routesDirectory, dir)\n    let dirList = await fsp.readdir(fullDir, { withFileTypes: true })\n\n    dirList = dirList.filter((d) => {\n      if (\n        d.name.startsWith('.') ||\n        (routeFileIgnorePrefix && d.name.startsWith(routeFileIgnorePrefix))\n      ) {\n        return false\n      }\n\n      if (routeFilePrefix) {\n        return d.name.startsWith(routeFilePrefix)\n      }\n\n      if (routeFileIgnorePattern) {\n        return !d.name.match(routeFileIgnoreRegExp)\n      }\n\n      return true\n    })\n\n    await Promise.all(\n      dirList.map(async (dirent) => {\n        const fullPath = path.join(fullDir, dirent.name)\n        const relativePath = path.join(dir, dirent.name)\n\n        if (dirent.isDirectory()) {\n          await recurse(relativePath)\n        } else if (fullPath.match(/\\.(tsx|ts|jsx|js)$/)) {\n          const filePath = replaceBackslash(path.join(dir, dirent.name))\n          const filePathNoExt = removeExt(filePath)\n          let routePath =\n            cleanPath(`/${filePathNoExt.split('.').join('/')}`) || ''\n\n          if (routeFilePrefix) {\n            routePath = routePath.replaceAll(routeFilePrefix, '')\n          }\n\n          if (disallowedRouteGroupConfiguration.test(dirent.name)) {\n            const errorMessage = `A route configuration for a route group was found at \\`${filePath}\\`. This is not supported. Did you mean to use a layout/pathless route instead?`\n            logger.error(`ERROR: ${errorMessage}`)\n            throw new Error(errorMessage)\n          }\n\n          const variableName = routePathToVariable(routePath)\n\n          // Remove the index from the route path and\n          // if the route path is empty, use `/'\n\n          const isLazy = routePath.endsWith('/lazy')\n\n          if (isLazy) {\n            routePath = routePath.replace(/\\/lazy$/, '')\n          }\n\n          const isRoute = routePath.endsWith('/route')\n          const isComponent = routePath.endsWith('/component')\n          const isErrorComponent = routePath.endsWith('/errorComponent')\n          const isPendingComponent = routePath.endsWith('/pendingComponent')\n          const isLoader = routePath.endsWith('/loader')\n\n          const segments = routePath.split('/')\n          const isLayout =\n            segments[segments.length - 1]?.startsWith('_') || false\n\n          ;(\n            [\n              [isComponent, 'component'],\n              [isErrorComponent, 'errorComponent'],\n              [isPendingComponent, 'pendingComponent'],\n              [isLoader, 'loader'],\n            ] as const\n          ).forEach(([isType, type]) => {\n            if (isType) {\n              logger.warn(\n                `WARNING: The \\`.${type}.tsx\\` suffix used for the ${filePath} file is deprecated. Use the new \\`.lazy.tsx\\` suffix instead.`,\n              )\n            }\n          })\n\n          routePath = routePath.replace(\n            /\\/(component|errorComponent|pendingComponent|loader|route|lazy)$/,\n            '',\n          )\n\n          if (routePath === 'index') {\n            routePath = '/'\n          }\n\n          routePath = routePath.replace(/\\/index$/, '/') || '/'\n\n          routeNodes.push({\n            filePath,\n            fullPath,\n            routePath,\n            variableName,\n            isRoute,\n            isComponent,\n            isErrorComponent,\n            isPendingComponent,\n            isLoader,\n            isLazy,\n            isLayout,\n          })\n        }\n      }),\n    )\n\n    return routeNodes\n  }\n\n  await recurse('./')\n\n  return routeNodes\n}\n\nlet isFirst = false\nlet skipMessage = false\n\ntype RouteSubNode = {\n  component?: RouteNode\n  errorComponent?: RouteNode\n  pendingComponent?: RouteNode\n  loader?: RouteNode\n  lazy?: RouteNode\n}\n\nexport async function generator(config: Config) {\n  const logger = logging({ disabled: config.disableLogging })\n  logger.log('')\n\n  if (!isFirst) {\n    logger.log('♻️  Generating routes...')\n    isFirst = true\n  } else if (skipMessage) {\n    skipMessage = false\n  } else {\n    logger.log('♻️  Regenerating routes...')\n  }\n\n  const taskId = latestTask + 1\n  latestTask = taskId\n\n  const checkLatest = () => {\n    if (latestTask !== taskId) {\n      skipMessage = true\n      return false\n    }\n\n    return true\n  }\n\n  const start = Date.now()\n  const routePathIdPrefix = config.routeFilePrefix ?? ''\n  const beforeRouteNodes = await getRouteNodes(config)\n  const rootRouteNode = beforeRouteNodes.find(\n    (d) => d.routePath === `/${rootPathId}`,\n  )\n\n  const preRouteNodes = multiSortBy(beforeRouteNodes, [\n    (d) => (d.routePath === '/' ? -1 : 1),\n    (d) => d.routePath?.split('/').length,\n    (d) => (d.filePath.match(/[./]index[.]/) ? 1 : -1),\n    (d) =>\n      d.filePath.match(\n        /[./](component|errorComponent|pendingComponent|loader|lazy)[.]/,\n      )\n        ? 1\n        : -1,\n    (d) => (d.filePath.match(/[./]route[.]/) ? -1 : 1),\n    (d) => (d.routePath?.endsWith('/') ? -1 : 1),\n    (d) => d.routePath,\n  ]).filter((d) => ![`/${rootPathId}`].includes(d.routePath || ''))\n\n  const routeTree: Array<RouteNode> = []\n  const routePiecesByPath: Record<string, RouteSubNode> = {}\n\n  // Loop over the flat list of routeNodes and\n  // build up a tree based on the routeNodes' routePath\n  const routeNodes: Array<RouteNode> = []\n\n  const handleNode = async (node: RouteNode) => {\n    let parentRoute = hasParentRoute(routeNodes, node, node.routePath)\n\n    // if the parent route is a virtual parent route, we need to find the real parent route\n    if (parentRoute?.isVirtualParentRoute && parentRoute.children?.length) {\n      // only if this sub-parent route returns a valid parent route, we use it, if not leave it as it\n      const possibleParentRoute = hasParentRoute(\n        parentRoute.children,\n        node,\n        node.routePath,\n      )\n      if (possibleParentRoute) {\n        parentRoute = possibleParentRoute\n      }\n    }\n\n    if (parentRoute) node.parent = parentRoute\n\n    node.path = determineNodePath(node)\n\n    const trimmedPath = trimPathLeft(node.path ?? '')\n\n    const split = trimmedPath.split('/')\n    const first = split[0] ?? trimmedPath\n    const lastRouteSegment = split[split.length - 1] ?? trimmedPath\n\n    node.isNonPath =\n      lastRouteSegment.startsWith('_') ||\n      routeGroupPatternRegex.test(lastRouteSegment)\n    node.isNonLayout = first.endsWith('_')\n\n    node.cleanedPath = removeGroups(\n      removeUnderscores(removeLayoutSegments(node.path)) ?? '',\n    )\n\n    // Ensure the boilerplate for the route exists, which can be skipped for virtual parent routes and virtual routes\n    if (!node.isVirtualParentRoute && !node.isVirtual) {\n      const routeCode = fs.readFileSync(node.fullPath, 'utf-8')\n\n      const escapedRoutePath = removeTrailingUnderscores(\n        node.routePath?.replaceAll('$', '$$') ?? '',\n      )\n\n      let replaced = routeCode\n\n      if (!routeCode) {\n        if (node.isLazy) {\n          replaced = [\n            `import { createLazyFileRoute } from '@tanstack/react-router'`,\n            `export const Route = createLazyFileRoute('${escapedRoutePath}')({\n  component: () => <div>Hello ${escapedRoutePath}!</div>\n})`,\n          ].join('\\n\\n')\n        } else if (\n          node.isRoute ||\n          (!node.isComponent &&\n            !node.isErrorComponent &&\n            !node.isPendingComponent &&\n            !node.isLoader)\n        ) {\n          replaced = [\n            `import { createFileRoute } from '@tanstack/react-router'`,\n            `export const Route = createFileRoute('${escapedRoutePath}')({\n  component: () => <div>Hello ${escapedRoutePath}!</div>\n})`,\n          ].join('\\n\\n')\n        }\n      } else {\n        replaced = routeCode\n          .replace(\n            /(FileRoute\\(\\s*['\"])([^\\s]*)(['\"],?\\s*\\))/g,\n            (match, p1, p2, p3) => `${p1}${escapedRoutePath}${p3}`,\n          )\n          .replace(\n            /(import\\s*\\{.*)(create(Lazy)?FileRoute)(.*\\}\\s*from\\s*['\"]@tanstack\\/react-router['\"])/gs,\n            (match, p1, p2, p3, p4) =>\n              `${p1}${node.isLazy ? 'createLazyFileRoute' : 'createFileRoute'}${p4}`,\n          )\n          .replace(\n            /create(Lazy)?FileRoute(\\(\\s*['\"])([^\\s]*)(['\"],?\\s*\\))/g,\n            (match, p1, p2, p3, p4) =>\n              `${node.isLazy ? 'createLazyFileRoute' : 'createFileRoute'}${p2}${escapedRoutePath}${p4}`,\n          )\n      }\n\n      if (replaced !== routeCode) {\n        logger.log(`🟡 Updating ${node.fullPath}`)\n        await fsp.writeFile(node.fullPath, replaced)\n      }\n    }\n\n    if (\n      !node.isVirtual &&\n      (node.isLoader ||\n        node.isComponent ||\n        node.isErrorComponent ||\n        node.isPendingComponent ||\n        node.isLazy)\n    ) {\n      routePiecesByPath[node.routePath!] =\n        routePiecesByPath[node.routePath!] || {}\n\n      routePiecesByPath[node.routePath!]![\n        node.isLazy\n          ? 'lazy'\n          : node.isLoader\n            ? 'loader'\n            : node.isErrorComponent\n              ? 'errorComponent'\n              : node.isPendingComponent\n                ? 'pendingComponent'\n                : 'component'\n      ] = node\n\n      const anchorRoute = routeNodes.find((d) => d.routePath === node.routePath)\n\n      if (!anchorRoute) {\n        await handleNode({\n          ...node,\n          isVirtual: true,\n          isLazy: false,\n          isLoader: false,\n          isComponent: false,\n          isErrorComponent: false,\n          isPendingComponent: false,\n        })\n      }\n      return\n    }\n\n    const cleanedPathIsEmpty = (node.cleanedPath || '').length === 0\n    const nonPathRoute = node.isRoute && node.isNonPath\n    node.isVirtualParentRequired =\n      node.isLayout || nonPathRoute ? !cleanedPathIsEmpty : false\n    if (!node.isVirtual && node.isVirtualParentRequired) {\n      const parentRoutePath = removeLastSegmentFromPath(node.routePath) || '/'\n      const parentVariableName = routePathToVariable(parentRoutePath)\n\n      const anchorRoute = routeNodes.find(\n        (d) => d.routePath === parentRoutePath,\n      )\n\n      if (!anchorRoute) {\n        const parentNode = {\n          ...node,\n          path: removeLastSegmentFromPath(node.path) || '/',\n          filePath: removeLastSegmentFromPath(node.filePath) || '/',\n          fullPath: removeLastSegmentFromPath(node.fullPath) || '/',\n          routePath: parentRoutePath,\n          variableName: parentVariableName,\n          isVirtual: true,\n          isLayout: false,\n          isVirtualParentRoute: true,\n          isVirtualParentRequired: false,\n        }\n\n        parentNode.children = parentNode.children ?? []\n        parentNode.children.push(node)\n\n        node.parent = parentNode\n\n        if (node.isLayout) {\n          // since `node.path` is used as the `id` on the route definition, we need to update it\n          node.path = determineNodePath(node)\n        }\n\n        await handleNode(parentNode)\n      } else {\n        anchorRoute.children = anchorRoute.children ?? []\n        anchorRoute.children.push(node)\n\n        node.parent = anchorRoute\n      }\n    }\n\n    if (node.parent) {\n      if (!node.isVirtualParentRequired) {\n        node.parent.children = node.parent.children ?? []\n        node.parent.children.push(node)\n      }\n    } else {\n      routeTree.push(node)\n    }\n\n    routeNodes.push(node)\n  }\n\n  for (const node of preRouteNodes) {\n    await handleNode(node)\n  }\n\n  function buildRouteConfig(nodes: Array<RouteNode>, depth = 1): string {\n    const children = nodes.map((node) => {\n      if (node.isRoot) {\n        return\n      }\n\n      if (node.isLayout && !node.children?.length) {\n        return\n      }\n\n      const route = `${node.variableName}Route`\n\n      if (node.children?.length) {\n        const childConfigs = buildRouteConfig(node.children, depth + 1)\n        return `${route}: ${route}.addChildren({${spaces(depth * 4)}${childConfigs}})`\n      }\n\n      return route\n    })\n\n    return children.filter(Boolean).join(`,`)\n  }\n\n  const routeConfigChildrenText = buildRouteConfig(routeTree)\n\n  const sortedRouteNodes = multiSortBy(routeNodes, [\n    (d) => (d.routePath?.includes(`/${rootPathId}`) ? -1 : 1),\n    (d) => d.routePath?.split('/').length,\n    (d) => (d.routePath?.endsWith(\"index'\") ? -1 : 1),\n    (d) => d,\n  ])\n\n  const imports = Object.entries({\n    createFileRoute: sortedRouteNodes.some((d) => d.isVirtual),\n    lazyFn: sortedRouteNodes.some(\n      (node) => routePiecesByPath[node.routePath!]?.loader,\n    ),\n    lazyRouteComponent: sortedRouteNodes.some(\n      (node) =>\n        routePiecesByPath[node.routePath!]?.component ||\n        routePiecesByPath[node.routePath!]?.errorComponent ||\n        routePiecesByPath[node.routePath!]?.pendingComponent,\n    ),\n  })\n    .filter((d) => d[1])\n    .map((d) => d[0])\n\n  const virtualRouteNodes = sortedRouteNodes.filter((d) => d.isVirtual)\n  const rootPathIdExtension =\n    config.addExtensions && rootRouteNode\n      ? path.extname(rootRouteNode.filePath)\n      : ''\n\n  const routeImports = [\n    ...config.routeTreeFileHeader,\n    '// This file is auto-generated by TanStack Router',\n    imports.length\n      ? `import { ${imports.join(', ')} } from '@tanstack/react-router'\\n`\n      : '',\n    '// Import Routes',\n    [\n      `import { Route as rootRoute } from './${replaceBackslash(\n        path.relative(\n          path.dirname(config.generatedRouteTree),\n          path.resolve(\n            config.routesDirectory,\n            `${routePathIdPrefix}${rootPathId}${rootPathIdExtension}`,\n          ),\n        ),\n      )}'`,\n      ...sortedRouteNodes\n        .filter((d) => !d.isVirtual)\n        .map((node) => {\n          return `import { Route as ${\n            node.variableName\n          }Import } from './${replaceBackslash(\n            removeExt(\n              path.relative(\n                path.dirname(config.generatedRouteTree),\n                path.resolve(config.routesDirectory, node.filePath),\n              ),\n              config.addExtensions,\n            ),\n          )}'`\n        }),\n    ].join('\\n'),\n    virtualRouteNodes.length ? '// Create Virtual Routes' : '',\n    virtualRouteNodes\n      .map((node) => {\n        return `const ${\n          node.variableName\n        }Import = createFileRoute('${removeTrailingUnderscores(\n          node.routePath,\n        )}')()`\n      })\n      .join('\\n'),\n    '// Create/Update Routes',\n    sortedRouteNodes\n      .map((node) => {\n        const loaderNode = routePiecesByPath[node.routePath!]?.loader\n        const componentNode = routePiecesByPath[node.routePath!]?.component\n        const errorComponentNode =\n          routePiecesByPath[node.routePath!]?.errorComponent\n        const pendingComponentNode =\n          routePiecesByPath[node.routePath!]?.pendingComponent\n        const lazyComponentNode = routePiecesByPath[node.routePath!]?.lazy\n\n        return [\n          `const ${node.variableName}Route = ${node.variableName}Import.update({\n          ${[\n            node.isNonPath\n              ? `id: '${node.path}'`\n              : `path: '${node.cleanedPath}'`,\n            `getParentRoute: () => ${node.parent?.variableName ?? 'root'}Route`,\n          ]\n            .filter(Boolean)\n            .join(',')}\n        }${config.disableTypes ? '' : 'as any'})`,\n          loaderNode\n            ? `.updateLoader({ loader: lazyFn(() => import('./${replaceBackslash(\n                removeExt(\n                  path.relative(\n                    path.dirname(config.generatedRouteTree),\n                    path.resolve(config.routesDirectory, loaderNode.filePath),\n                  ),\n                  config.addExtensions,\n                ),\n              )}'), 'loader') })`\n            : '',\n          componentNode || errorComponentNode || pendingComponentNode\n            ? `.update({\n              ${(\n                [\n                  ['component', componentNode],\n                  ['errorComponent', errorComponentNode],\n                  ['pendingComponent', pendingComponentNode],\n                ] as const\n              )\n                .filter((d) => d[1])\n                .map((d) => {\n                  return `${\n                    d[0]\n                  }: lazyRouteComponent(() => import('./${replaceBackslash(\n                    removeExt(\n                      path.relative(\n                        path.dirname(config.generatedRouteTree),\n                        path.resolve(config.routesDirectory, d[1]!.filePath),\n                      ),\n                      config.addExtensions,\n                    ),\n                  )}'), '${d[0]}')`\n                })\n                .join('\\n,')}\n            })`\n            : '',\n          lazyComponentNode\n            ? `.lazy(() => import('./${replaceBackslash(\n                removeExt(\n                  path.relative(\n                    path.dirname(config.generatedRouteTree),\n                    path.resolve(\n                      config.routesDirectory,\n                      lazyComponentNode.filePath,\n                    ),\n                  ),\n                  config.addExtensions,\n                ),\n              )}').then((d) => d.Route))`\n            : '',\n        ].join('')\n      })\n      .join('\\n\\n'),\n    ...(config.disableTypes\n      ? []\n      : [\n          '// Populate the FileRoutesByPath interface',\n          `declare module '@tanstack/react-router' {\n  interface FileRoutesByPath {\n    ${routeNodes\n      .map((routeNode) => {\n        const [filePathId, routeId] = getFilePathIdAndRouteIdFromPath(\n          routeNode.routePath!,\n        )\n\n        return `'${filePathId}': {\n          id: '${routeId}'\n          path: '${inferPath(routeNode)}'\n          fullPath: '${inferFullPath(routeNode)}'\n          preLoaderRoute: typeof ${routeNode.variableName}Import\n          parentRoute: typeof ${\n            routeNode.isVirtualParentRequired\n              ? `${routeNode.parent?.variableName}Route`\n              : routeNode.parent?.variableName\n                ? `${routeNode.parent.variableName}Import`\n                : 'rootRoute'\n          }\n        }`\n      })\n      .join('\\n')}\n  }\n}`,\n        ]),\n    '// Create and export the route tree',\n    `export const routeTree = rootRoute.addChildren({${routeConfigChildrenText}})`,\n    ...config.routeTreeFileFooter,\n  ]\n    .filter(Boolean)\n    .join('\\n\\n')\n\n  const routeManifest = JSON.stringify(\n    {\n      routes: {\n        __root__: {\n          filePath: rootRouteNode?.filePath,\n          children: routeTree.map(\n            (d) => getFilePathIdAndRouteIdFromPath(d.routePath!)[1],\n          ),\n        },\n        ...Object.fromEntries(\n          routeNodes.map((d) => {\n            const [filePathId, routeId] = getFilePathIdAndRouteIdFromPath(\n              d.routePath!,\n            )\n\n            return [\n              routeId,\n              {\n                filePath: d.filePath,\n                parent: d.parent?.routePath\n                  ? getFilePathIdAndRouteIdFromPath(d.parent.routePath)[1]\n                  : undefined,\n                children: d.children?.map(\n                  (childRoute) =>\n                    getFilePathIdAndRouteIdFromPath(childRoute.routePath!)[1],\n                ),\n              },\n            ]\n          }),\n        ),\n      },\n    },\n    null,\n    2,\n  )\n\n  const routeConfigFileContent = await prettier.format(\n    [\n      routeImports,\n      '\\n',\n      '/* ROUTE_MANIFEST_START',\n      routeManifest,\n      'ROUTE_MANIFEST_END */',\n    ].join('\\n'),\n    {\n      semi: config.semicolons,\n      singleQuote: config.quoteStyle === 'single',\n      parser: 'typescript',\n    },\n  )\n\n  if (!checkLatest()) return\n\n  const existingRouteTreeContent = await fsp\n    .readFile(path.resolve(config.generatedRouteTree), 'utf-8')\n    .catch((err) => {\n      if (err.code === 'ENOENT') {\n        return ''\n      }\n\n      throw err\n    })\n\n  if (!checkLatest()) return\n\n  // Ensure the directory exists\n  await fsp.mkdir(path.dirname(path.resolve(config.generatedRouteTree)), {\n    recursive: true,\n  })\n\n  if (!checkLatest()) return\n\n  // Write the route tree file, if it has changed\n  if (existingRouteTreeContent !== routeConfigFileContent) {\n    await fsp.writeFile(\n      path.resolve(config.generatedRouteTree),\n      routeConfigFileContent,\n    )\n    if (!checkLatest()) return\n  }\n\n  logger.log(\n    `✅ Processed ${routeNodes.length === 1 ? 'route' : 'routes'} in ${\n      Date.now() - start\n    }ms`,\n  )\n}\n\nfunction routePathToVariable(routePath: string): string {\n  return (\n    removeUnderscores(routePath)\n      ?.replace(/\\/\\$\\//g, '/splat/')\n      .replace(/\\$$/g, 'splat')\n      .replace(/\\$/g, '')\n      .split(/[/-]/g)\n      .map((d, i) => (i > 0 ? capitalize(d) : d))\n      .join('')\n      .replace(/([^a-zA-Z0-9]|[.])/gm, '')\n      .replace(/^(\\d)/g, 'R$1') ?? ''\n  )\n}\n\nexport function removeExt(d: string, keepExtension: boolean = false) {\n  return keepExtension ? d : d.substring(0, d.lastIndexOf('.')) || d\n}\n\nfunction spaces(d: number): string {\n  return Array.from({ length: d })\n    .map(() => ' ')\n    .join('')\n}\n\nexport function multiSortBy<T>(\n  arr: Array<T>,\n  accessors: Array<(item: T) => any> = [(d) => d],\n): Array<T> {\n  return arr\n    .map((d, i) => [d, i] as const)\n    .sort(([a, ai], [b, bi]) => {\n      for (const accessor of accessors) {\n        const ao = accessor(a)\n        const bo = accessor(b)\n\n        if (typeof ao === 'undefined') {\n          if (typeof bo === 'undefined') {\n            continue\n          }\n          return 1\n        }\n\n        if (ao === bo) {\n          continue\n        }\n\n        return ao > bo ? 1 : -1\n      }\n\n      return ai - bi\n    })\n    .map(([d]) => d)\n}\n\nfunction capitalize(s: string) {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nfunction removeUnderscores(s?: string) {\n  return s?.replaceAll(/(^_|_$)/gi, '').replaceAll(/(\\/_|_\\/)/gi, '/')\n}\n\nfunction removeTrailingUnderscores(s?: string) {\n  return s?.replaceAll(/(_$)/gi, '').replaceAll(/(_\\/)/gi, '/')\n}\n\nfunction replaceBackslash(s: string) {\n  return s.replaceAll(/\\\\/gi, '/')\n}\n\nfunction removeGroups(s: string) {\n  return s.replace(possiblyNestedRouteGroupPatternRegex, '')\n}\n\n/**\n * The `node.path` is used as the `id` in the route definition.\n * This function checks if the given node has a parent and if so, it determines the correct path for the given node.\n * @param node - The node to determine the path for.\n * @returns The correct path for the given node.\n */\nfunction determineNodePath(node: RouteNode) {\n  return (node.path = node.parent\n    ? node.routePath?.replace(node.parent.routePath!, '') || '/'\n    : node.routePath)\n}\n\n/**\n * Removes the last segment from a given path. Segments are considered to be separated by a '/'.\n *\n * @param {string} routePath - The path from which to remove the last segment. Defaults to '/'.\n * @returns {string} The path with the last segment removed.\n * @example\n * removeLastSegmentFromPath('/workspace/_auth/foo') // '/workspace/_auth'\n */\nexport function removeLastSegmentFromPath(routePath: string = '/'): string {\n  const segments = routePath.split('/')\n  segments.pop() // Remove the last segment\n  return segments.join('/')\n}\n\n/**\n * Removes all segments from a given path that start with an underscore ('_').\n *\n * @param {string} routePath - The path from which to remove segments. Defaults to '/'.\n * @returns {string} The path with all underscore-prefixed segments removed.\n * @example\n * removeLayoutSegments('/workspace/_auth/foo') // '/workspace/foo'\n */\nfunction removeLayoutSegments(routePath: string = '/'): string {\n  const segments = routePath.split('/')\n  const newSegments = segments.filter((segment) => !segment.startsWith('_'))\n  return newSegments.join('/')\n}\n\nexport function hasParentRoute(\n  routes: Array<RouteNode>,\n  node: RouteNode,\n  routePathToCheck: string | undefined,\n): RouteNode | null {\n  if (!routePathToCheck || routePathToCheck === '/') {\n    return null\n  }\n\n  const sortedNodes = multiSortBy(routes, [\n    (d) => d.routePath!.length * -1,\n    (d) => d.variableName,\n  ]).filter((d) => d.routePath !== `/${rootPathId}`)\n\n  for (const route of sortedNodes) {\n    if (route.routePath === '/') continue\n\n    if (\n      routePathToCheck.startsWith(`${route.routePath}/`) &&\n      route.routePath !== routePathToCheck\n    ) {\n      return route\n    }\n  }\n\n  const segments = routePathToCheck.split('/')\n  segments.pop() // Remove the last segment\n  const parentRoutePath = segments.join('/')\n\n  return hasParentRoute(routes, node, parentRoutePath)\n}\n\n/**\n * Infers the full path for use by TS\n */\nexport const inferFullPath = (routeNode: RouteNode): string => {\n  const fullPath = removeGroups(\n    removeUnderscores(removeLayoutSegments(routeNode.routePath)) ?? '',\n  )\n\n  return routeNode.cleanedPath === '/' ? fullPath : fullPath.replace(/\\/$/, '')\n}\n\n/**\n * Infers the path for use by TS\n */\nexport const inferPath = (routeNode: RouteNode): string => {\n  return routeNode.cleanedPath === '/'\n    ? routeNode.cleanedPath\n    : (routeNode.cleanedPath?.replace(/\\/$/, '') ?? '')\n}\n\nfunction getFilePathIdAndRouteIdFromPath(pathname: string) {\n  const filePathId = removeTrailingUnderscores(pathname)\n  const id = removeGroups(filePathId ?? '')\n\n  return [filePathId, id] as const\n}\n"],"names":[],"mappings":"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"}