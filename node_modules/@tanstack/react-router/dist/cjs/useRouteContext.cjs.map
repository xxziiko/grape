{"version":3,"file":"useRouteContext.cjs","sources":["../../src/useRouteContext.ts"],"sourcesContent":["import { useMatch } from './useMatch'\nimport type { MakeRouteMatch } from './Matches'\nimport type { AnyRoute } from './route'\nimport type { AllContext, RouteById, RouteIds } from './routeInfo'\nimport type { RegisteredRouter } from './router'\nimport type { Expand, StrictOrFrom } from './utils'\n\nexport type UseRouteContextOptions<\n  TFrom,\n  TStrict extends boolean,\n  TRouteContext,\n  TSelected,\n> = StrictOrFrom<TFrom, TStrict> & {\n  select?: (search: TRouteContext) => TSelected\n}\n\nexport function useRouteContext<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TStrict extends boolean = true,\n  TRouteContext = TStrict extends false\n    ? AllContext<TRouteTree>\n    : Expand<RouteById<TRouteTree, TFrom>['types']['allContext']>,\n  TSelected = TRouteContext,\n>(\n  opts: UseRouteContextOptions<TFrom, TStrict, TRouteContext, TSelected>,\n): TSelected {\n  return useMatch({\n    ...(opts as any),\n    select: (match: MakeRouteMatch<TRouteTree, TFrom>) =>\n      opts.select ? opts.select(match.context) : match.context,\n  })\n}\n"],"names":["useMatch"],"mappings":";;;AAgBO,SAAS,gBASd,MACW;AACX,SAAOA,kBAAS;AAAA,IACd,GAAI;AAAA,IACJ,QAAQ,CAAC,UACP,KAAK,SAAS,KAAK,OAAO,MAAM,OAAO,IAAI,MAAM;AAAA,EAAA,CACpD;AACH;;"}