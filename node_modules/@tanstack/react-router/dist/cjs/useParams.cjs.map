{"version":3,"file":"useParams.cjs","sources":["../../src/useParams.tsx"],"sourcesContent":["import { useMatch } from './useMatch'\nimport type { AnyRoute } from './route'\nimport type { AllParams, RouteById, RouteIds } from './routeInfo'\nimport type { RegisteredRouter } from './router'\nimport type { StrictOrFrom } from './utils'\n\nexport type UseParamsOptions<\n  TFrom,\n  TStrict extends boolean,\n  TParams,\n  TSelected,\n> = StrictOrFrom<TFrom, TStrict> & {\n  select?: (params: TParams) => TSelected\n}\n\nexport function useParams<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TStrict extends boolean = true,\n  TParams = TStrict extends false\n    ? AllParams<TRouteTree>\n    : RouteById<TRouteTree, TFrom>['types']['allParams'],\n  TSelected = TParams,\n>(opts: UseParamsOptions<TFrom, TStrict, TParams, TSelected>): TSelected {\n  return useMatch({\n    ...opts,\n    select: (match) => {\n      return opts.select ? opts.select(match.params as TParams) : match.params\n    },\n  }) as TSelected\n}\n"],"names":["useMatch"],"mappings":";;;AAeO,SAAS,UAQd,MAAuE;AACvE,SAAOA,kBAAS;AAAA,IACd,GAAG;AAAA,IACH,QAAQ,CAAC,UAAU;AACjB,aAAO,KAAK,SAAS,KAAK,OAAO,MAAM,MAAiB,IAAI,MAAM;AAAA,IACpE;AAAA,EAAA,CACD;AACH;;"}