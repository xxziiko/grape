{"version":3,"file":"useSearch.cjs","sources":["../../src/useSearch.tsx"],"sourcesContent":["import { useMatch } from './useMatch'\nimport type { AnyRoute } from './route'\nimport type { FullSearchSchema, RouteById, RouteIds } from './routeInfo'\nimport type { RegisteredRouter } from './router'\nimport type { MakeRouteMatch } from './Matches'\nimport type { Expand, StrictOrFrom } from './utils'\n\nexport type UseSearchOptions<\n  TFrom,\n  TStrict extends boolean,\n  TSearch,\n  TSelected,\n> = StrictOrFrom<TFrom, TStrict> & {\n  select?: (search: TSearch) => TSelected\n}\n\nexport function useSearch<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TStrict extends boolean = true,\n  TSearch = TStrict extends false\n    ? FullSearchSchema<TRouteTree>\n    : Expand<RouteById<TRouteTree, TFrom>['types']['fullSearchSchema']>,\n  TSelected = TSearch,\n>(opts: UseSearchOptions<TFrom, TStrict, TSearch, TSelected>): TSelected {\n  return useMatch({\n    ...opts,\n    select: (match: MakeRouteMatch<TRouteTree, TFrom>) => {\n      return opts.select ? opts.select(match.search) : match.search\n    },\n  })\n}\n"],"names":["useMatch"],"mappings":";;;AAgBO,SAAS,UAQd,MAAuE;AACvE,SAAOA,kBAAS;AAAA,IACd,GAAG;AAAA,IACH,QAAQ,CAAC,UAA6C;AACpD,aAAO,KAAK,SAAS,KAAK,OAAO,MAAM,MAAM,IAAI,MAAM;AAAA,IACzD;AAAA,EAAA,CACD;AACH;;"}