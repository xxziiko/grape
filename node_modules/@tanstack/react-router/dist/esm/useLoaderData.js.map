{"version":3,"file":"useLoaderData.js","sources":["../../src/useLoaderData.tsx"],"sourcesContent":["import { type RegisteredRouter } from './router'\nimport { type AnyRoute } from './route'\nimport { useMatch } from './useMatch'\nimport type { MakeRouteMatch } from './Matches'\nimport type { RouteIds } from './routeInfo'\nimport type { StrictOrFrom } from './utils'\n\nexport type UseLoaderDataOptions<\n  TFrom,\n  TStrict extends boolean,\n  TRouteMatch,\n  TSelected,\n> = StrictOrFrom<TFrom, TStrict> & {\n  select?: (match: TRouteMatch) => TSelected\n}\n\nexport function useLoaderData<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TStrict extends boolean = true,\n  TRouteMatch extends MakeRouteMatch<\n    TRouteTree,\n    TFrom,\n    TStrict\n  > = MakeRouteMatch<TRouteTree, TFrom, TStrict>,\n  TSelected = Required<TRouteMatch>['loaderData'],\n>(\n  opts: UseLoaderDataOptions<TFrom, TStrict, TRouteMatch, TSelected>,\n): TSelected {\n  return useMatch<TRouteTree, TFrom, TStrict, TRouteMatch, TSelected>({\n    ...opts,\n    select: (s) => {\n      return typeof opts.select === 'function'\n        ? opts.select(s.loaderData as TRouteMatch)\n        : (s.loaderData as TSelected)\n    },\n  })\n}\n"],"names":[],"mappings":";AAgBO,SAAS,cAWd,MACW;AACX,SAAO,SAA6D;AAAA,IAClE,GAAG;AAAA,IACH,QAAQ,CAAC,MAAM;AACN,aAAA,OAAO,KAAK,WAAW,aAC1B,KAAK,OAAO,EAAE,UAAyB,IACtC,EAAE;AAAA,IACT;AAAA,EAAA,CACD;AACH;"}