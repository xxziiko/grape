import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import * as React from "react";
import { clsx } from "clsx";
import * as goober from "goober";
import { tokens } from "./tokens.js";
import { displayValue } from "./utils.js";
import { ShadowDomTargetContext } from "./context.js";
const Expander = ({ expanded, style = {} }) => {
  const styles = useStyles();
  return /* @__PURE__ */ jsx("span", { className: styles.expander, children: /* @__PURE__ */ jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: "12",
      height: "12",
      fill: "none",
      viewBox: "0 0 24 24",
      className: clsx(styles.expanderIcon(expanded)),
      children: /* @__PURE__ */ jsx(
        "path",
        {
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "2",
          d: "M9 18l6-6-6-6"
        }
      )
    }
  ) });
};
function chunkArray(array, size) {
  if (size < 1) return [];
  let i = 0;
  const result = [];
  while (i < array.length) {
    result.push(array.slice(i, i + size));
    i = i + size;
  }
  return result;
}
const DefaultRenderer = ({
  handleEntry,
  label,
  value,
  subEntries = [],
  subEntryPages = [],
  type,
  expanded = false,
  toggleExpanded,
  pageSize,
  renderer
}) => {
  const [expandedPages, setExpandedPages] = React.useState([]);
  const [valueSnapshot, setValueSnapshot] = React.useState(void 0);
  const styles = useStyles();
  const refreshValueSnapshot = () => {
    setValueSnapshot(value());
  };
  return /* @__PURE__ */ jsx("div", { className: styles.entry, children: subEntryPages.length ? /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsxs(
      "button",
      {
        className: styles.expandButton,
        onClick: () => toggleExpanded(),
        children: [
          /* @__PURE__ */ jsx(Expander, { expanded }),
          label,
          /* @__PURE__ */ jsxs("span", { className: styles.info, children: [
            String(type).toLowerCase() === "iterable" ? "(Iterable) " : "",
            subEntries.length,
            " ",
            subEntries.length > 1 ? `items` : `item`
          ] })
        ]
      }
    ),
    expanded ? subEntryPages.length === 1 ? /* @__PURE__ */ jsx("div", { className: styles.subEntries, children: subEntries.map((entry, index) => handleEntry(entry)) }) : /* @__PURE__ */ jsx("div", { className: styles.subEntries, children: subEntryPages.map((entries, index) => {
      return /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsxs("div", { className: styles.entry, children: [
        /* @__PURE__ */ jsxs(
          "button",
          {
            className: clsx(styles.labelButton, "labelButton"),
            onClick: () => setExpandedPages(
              (old) => old.includes(index) ? old.filter((d) => d !== index) : [...old, index]
            ),
            children: [
              /* @__PURE__ */ jsx(Expander, { expanded: expandedPages.includes(index) }),
              " ",
              "[",
              index * pageSize,
              " ...",
              " ",
              index * pageSize + pageSize - 1,
              "]"
            ]
          }
        ),
        expandedPages.includes(index) ? /* @__PURE__ */ jsx("div", { className: styles.subEntries, children: entries.map((entry) => handleEntry(entry)) }) : null
      ] }) }, index);
    }) }) : null
  ] }) : type === "function" ? /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsx(
    Explorer,
    {
      renderer,
      label: /* @__PURE__ */ jsxs(
        "button",
        {
          onClick: refreshValueSnapshot,
          className: styles.refreshValueBtn,
          children: [
            /* @__PURE__ */ jsx("span", { children: label }),
            " ðŸ”„",
            " "
          ]
        }
      ),
      value: valueSnapshot,
      defaultExpanded: {}
    }
  ) }) : /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsxs("span", { children: [
      label,
      ":"
    ] }),
    " ",
    /* @__PURE__ */ jsx("span", { className: styles.value, children: displayValue(value) })
  ] }) });
};
function isIterable(x) {
  return Symbol.iterator in x;
}
function Explorer({
  value,
  defaultExpanded,
  renderer = DefaultRenderer,
  pageSize = 100,
  filterSubEntries,
  ...rest
}) {
  const [expanded, setExpanded] = React.useState(Boolean(defaultExpanded));
  const toggleExpanded = React.useCallback(() => setExpanded((old) => !old), []);
  let type = typeof value;
  let subEntries = [];
  const makeProperty = (sub) => {
    const subDefaultExpanded = defaultExpanded === true ? { [sub.label]: true } : defaultExpanded == null ? void 0 : defaultExpanded[sub.label];
    return {
      ...sub,
      defaultExpanded: subDefaultExpanded
    };
  };
  if (Array.isArray(value)) {
    type = "array";
    subEntries = value.map(
      (d, i) => makeProperty({
        label: i.toString(),
        value: d
      })
    );
  } else if (value !== null && typeof value === "object" && isIterable(value) && typeof value[Symbol.iterator] === "function") {
    type = "Iterable";
    subEntries = Array.from(
      value,
      (val, i) => makeProperty({
        label: i.toString(),
        value: val
      })
    );
  } else if (typeof value === "object" && value !== null) {
    type = "object";
    subEntries = Object.entries(value).map(
      ([key, val]) => makeProperty({
        label: key,
        value: val
      })
    );
  }
  subEntries = filterSubEntries ? filterSubEntries(subEntries) : subEntries;
  const subEntryPages = chunkArray(subEntries, pageSize);
  return renderer({
    handleEntry: (entry) => /* @__PURE__ */ jsx(
      Explorer,
      {
        value,
        renderer,
        filterSubEntries,
        ...rest,
        ...entry
      },
      entry.label
    ),
    type,
    subEntries,
    subEntryPages,
    value,
    expanded,
    toggleExpanded,
    pageSize,
    ...rest
  });
}
const stylesFactory = (shadowDOMTarget) => {
  const { colors, font, size, alpha, shadow, border } = tokens;
  const { fontFamily, lineHeight, size: fontSize } = font;
  const css = shadowDOMTarget ? goober.css.bind({ target: shadowDOMTarget }) : goober.css;
  return {
    entry: css`
      font-family: ${fontFamily.mono};
      font-size: ${fontSize.xs};
      line-height: ${lineHeight.sm};
      outline: none;
      word-break: break-word;
    `,
    labelButton: css`
      cursor: pointer;
      color: inherit;
      font: inherit;
      outline: inherit;
      background: transparent;
      border: none;
      padding: 0;
    `,
    expander: css`
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: ${size[3]};
      height: ${size[3]};
      padding-left: 3px;
      box-sizing: content-box;
    `,
    expanderIcon: (expanded) => {
      if (expanded) {
        return css`
          transform: rotate(90deg);
          transition: transform 0.1s ease;
        `;
      }
      return css`
        transform: rotate(0deg);
        transition: transform 0.1s ease;
      `;
    },
    expandButton: css`
      display: flex;
      gap: ${size[1]};
      align-items: center;
      cursor: pointer;
      color: inherit;
      font: inherit;
      outline: inherit;
      background: transparent;
      border: none;
      padding: 0;
    `,
    value: css`
      color: ${colors.purple[400]};
    `,
    subEntries: css`
      margin-left: ${size[2]};
      padding-left: ${size[2]};
      border-left: 2px solid ${colors.darkGray[400]};
    `,
    info: css`
      color: ${colors.gray[500]};
      font-size: ${fontSize["2xs"]};
      padding-left: ${size[1]};
    `,
    refreshValueBtn: css`
      appearance: none;
      border: 0;
      cursor: pointer;
      background: transparent;
      color: inherit;
      padding: 0;
      font-family: ${fontFamily.mono};
      font-size: ${fontSize.xs};
    `
  };
};
let _styles = null;
function useStyles() {
  const shadowDomTarget = React.useContext(ShadowDomTargetContext);
  if (_styles) return _styles;
  _styles = stylesFactory(shadowDomTarget);
  return _styles;
}
export {
  DefaultRenderer,
  Expander,
  chunkArray,
  Explorer as default
};
//# sourceMappingURL=Explorer.js.map
